/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type BadRequestWithErrorData = {
    error?: string | undefined;
};

export class BadRequestWithError extends Error {
    error?: string | undefined;

    /** The original data that was passed to this error instance. */
    data$: BadRequestWithErrorData;

    constructor(err: BadRequestWithErrorData) {
        super("");
        this.data$ = err;

        if (err.error != null) {
            this.error = err.error;
        }

        this.message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : "API error occurred";

        this.name = "BadRequestWithError";
    }
}

/** @internal */
export namespace BadRequestWithError$ {
    export type Inbound = {
        error?: string | undefined;
    };

    export const inboundSchema: z.ZodType<BadRequestWithError, z.ZodTypeDef, Inbound> = z
        .object({
            error: z.string().optional(),
        })
        .transform((v) => {
            return new BadRequestWithError({
                ...(v.error === undefined ? null : { error: v.error }),
            });
        });

    export type Outbound = {
        error?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, BadRequestWithError> = z
        .instanceof(BadRequestWithError)
        .transform((v) => v.data$)
        .pipe(
            z
                .object({
                    error: z.string().optional(),
                })
                .transform((v) => {
                    return {
                        ...(v.error === undefined ? null : { error: v.error }),
                    };
                })
        );
}
