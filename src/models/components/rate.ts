/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import { ResponseMessage, ResponseMessage$ } from "./responsemessage.js";
import { ServiceLevelWithParent, ServiceLevelWithParent$ } from "./servicelevelwithparent.js";
import * as z from "zod";

export const Attributes = {
    Bestvalue: "BESTVALUE",
    Cheapest: "CHEAPEST",
    Fastest: "FASTEST",
} as const;
export type Attributes = ClosedEnum<typeof Attributes>;

export type Rate = {
    /**
     * Final Rate price, expressed in the currency used in the sender's country.
     */
    amount: string;
    /**
     * Final Rate price, expressed in the currency used in the recipient's country.
     */
    amountLocal: string;
    /**
     * Currency used in the sender's country, refers to `amount`.
     *
     * @remarks
     * The <a href="http://www.xe.com/iso4217.php">official ISO 4217</a> currency codes are used, e.g. `USD` or `EUR`.
     */
    currency: string;
    /**
     * Currency used in the recipient's country, refers to `amount_local`.
     *
     * @remarks
     * The <a href="http://www.xe.com/iso4217.php">official ISO 4217</a> currency codes are used, e.g. `USD` or "EUR".
     */
    currencyLocal: string;
    /**
     * Predicted time the carrier will deliver the package in the destination's local time zone. In the format `HH:MM:SS`.
     */
    arrivesBy?: string | undefined;
    /**
     * An array containing specific attributes of this Rate in context of the entire shipment.
     *
     * @remarks
     * Attributes can be assigned `CHEAPEST`, `FASTEST`, or `BESTVALUE`.
     */
    attributes: Array<Attributes>;
    /**
     * Object ID of the carrier account that has been used to retrieve the rate.
     */
    carrierAccount: string;
    /**
     * Further clarification of the transit times.
     *
     * @remarks
     * Often, this includes notes that the transit time as given in "days" is only an average, not a guaranteed time.
     */
    durationTerms?: string | undefined;
    /**
     * Estimated transit time (duration) in days of the Parcel at the given servicelevel.
     *
     * @remarks
     * Please note that this is not binding, but only an average value as given by the provider.
     * Shippo is not able to guarantee any transit times.
     */
    estimatedDays?: number | undefined;
    /**
     * Cost to the user to insure the Rate for the requested amount of coverage, if insurance coverage was requested.
     *
     * @remarks
     * Expressed in the currency used in the sender's country. Will be null if no insurance coverage was requested, or if insurance is requested from a non-standard insurance provider.
     * Please note this price is already included in the `amount` and `amount_local` fields on the Rate. Do not add this field to them.
     */
    includedInsurancePrice?: string | undefined;
    messages?: Array<ResponseMessage> | undefined;
    /**
     * Date and time of Rate creation.
     */
    objectCreated: Date;
    /**
     * Unique identifier of the given Rate object.
     */
    objectId: string;
    /**
     * Username of the user who created the rate object.
     */
    objectOwner: string;
    /**
     * Carrier offering the rate, e.g., `FedEx` or `Deutsche Post DHL`.
     */
    provider: string;
    /**
     * URL to the provider logo with max. dimensions of 75*75px.
     *
     * @remarks
     * Please refer to the provider's Logo Usage Guidelines before using the logo.
     */
    providerImage75?: string | undefined;
    /**
     * URL to the provider logo with max. dimensions of 200*200px.
     *
     * @remarks
     * Please refer to the provider's Logo Usage Guidelines before using the logo.
     */
    providerImage200?: string | undefined;
    servicelevel: ServiceLevelWithParent;
    shipment: string;
    /**
     * Indicates whether the object has been created in test mode.
     */
    test?: boolean | undefined;
    /**
     * The parcel's transit zone token. These tokens can vary depending on the provider.
     */
    zone?: string | undefined;
};

/** @internal */
export namespace Attributes$ {
    export const inboundSchema: z.ZodNativeEnum<typeof Attributes> = z.nativeEnum(Attributes);
    export const outboundSchema: z.ZodNativeEnum<typeof Attributes> = inboundSchema;
}

/** @internal */
export namespace Rate$ {
    export const inboundSchema: z.ZodType<Rate, z.ZodTypeDef, unknown> = z
        .object({
            amount: z.string(),
            amount_local: z.string(),
            currency: z.string(),
            currency_local: z.string(),
            arrives_by: z.string().optional(),
            attributes: z.array(Attributes$.inboundSchema),
            carrier_account: z.string(),
            duration_terms: z.string().optional(),
            estimated_days: z.number().int().optional(),
            included_insurance_price: z.string().optional(),
            messages: z.array(ResponseMessage$.inboundSchema).optional(),
            object_created: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v)),
            object_id: z.string(),
            object_owner: z.string(),
            provider: z.string(),
            provider_image_75: z.string().optional(),
            provider_image_200: z.string().optional(),
            servicelevel: ServiceLevelWithParent$.inboundSchema,
            shipment: z.string(),
            test: z.boolean().optional(),
            zone: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                amount_local: "amountLocal",
                currency_local: "currencyLocal",
                arrives_by: "arrivesBy",
                carrier_account: "carrierAccount",
                duration_terms: "durationTerms",
                estimated_days: "estimatedDays",
                included_insurance_price: "includedInsurancePrice",
                object_created: "objectCreated",
                object_id: "objectId",
                object_owner: "objectOwner",
                provider_image_75: "providerImage75",
                provider_image_200: "providerImage200",
            });
        });

    export type Outbound = {
        amount: string;
        amount_local: string;
        currency: string;
        currency_local: string;
        arrives_by?: string | undefined;
        attributes: Array<string>;
        carrier_account: string;
        duration_terms?: string | undefined;
        estimated_days?: number | undefined;
        included_insurance_price?: string | undefined;
        messages?: Array<ResponseMessage$.Outbound> | undefined;
        object_created: string;
        object_id: string;
        object_owner: string;
        provider: string;
        provider_image_75?: string | undefined;
        provider_image_200?: string | undefined;
        servicelevel: ServiceLevelWithParent$.Outbound;
        shipment: string;
        test?: boolean | undefined;
        zone?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Rate> = z
        .object({
            amount: z.string(),
            amountLocal: z.string(),
            currency: z.string(),
            currencyLocal: z.string(),
            arrivesBy: z.string().optional(),
            attributes: z.array(Attributes$.outboundSchema),
            carrierAccount: z.string(),
            durationTerms: z.string().optional(),
            estimatedDays: z.number().int().optional(),
            includedInsurancePrice: z.string().optional(),
            messages: z.array(ResponseMessage$.outboundSchema).optional(),
            objectCreated: z.date().transform((v) => v.toISOString()),
            objectId: z.string(),
            objectOwner: z.string(),
            provider: z.string(),
            providerImage75: z.string().optional(),
            providerImage200: z.string().optional(),
            servicelevel: ServiceLevelWithParent$.outboundSchema,
            shipment: z.string(),
            test: z.boolean().optional(),
            zone: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                amountLocal: "amount_local",
                currencyLocal: "currency_local",
                arrivesBy: "arrives_by",
                carrierAccount: "carrier_account",
                durationTerms: "duration_terms",
                estimatedDays: "estimated_days",
                includedInsurancePrice: "included_insurance_price",
                objectCreated: "object_created",
                objectId: "object_id",
                objectOwner: "object_owner",
                providerImage75: "provider_image_75",
                providerImage200: "provider_image_200",
            });
        });
}
