/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";

/**
 * `INVALID` batch shipments cannot be purchased and will have to be removed, fixed, and added to the batch again.<br>
 *
 * @remarks
 * `VALID` batch shipments can be purchased. <br>
 * Batch shipments with the status `TRANSACTION_FAILED` were not able to be purchased and the error will be displayed on the message field<br>
 * `INCOMPLETE` batch shipments have an issue with the Address and will need to be removed, fixed, and added to the batch again.
 */
export const Status = {
  Invalid: "INVALID",
  Valid: "VALID",
  Incomplete: "INCOMPLETE",
  TransactionFailed: "TRANSACTION_FAILED",
} as const;
/**
 * `INVALID` batch shipments cannot be purchased and will have to be removed, fixed, and added to the batch again.<br>
 *
 * @remarks
 * `VALID` batch shipments can be purchased. <br>
 * Batch shipments with the status `TRANSACTION_FAILED` were not able to be purchased and the error will be displayed on the message field<br>
 * `INCOMPLETE` batch shipments have an issue with the Address and will need to be removed, fixed, and added to the batch again.
 */
export type Status = ClosedEnum<typeof Status>;

export type BatchShipment = {
  /**
   * Object ID of the carrier account to be used for this shipment (will override batch default)
   */
  carrierAccount?: string | undefined;
  /**
   * A string of up to 100 characters that can be filled with any additional information you want
   *
   * @remarks
   * to attach to the object.
   */
  metadata?: string | undefined;
  /**
   * A token that sets the shipping method for the batch, overriding the batch default.
   *
   * @remarks
   * Servicelevel tokens can be found <a href="#tag/Service-Levels">in this list</a>
   * or <a href="#operation/ListCarrierAccounts">at this endpoint</a>.
   */
  servicelevelToken?: string | undefined;
  /**
   * List of Shipment and Transaction error messages.
   */
  messages?: Array<any> | undefined;
  /**
   * Object ID of this batch shipment. Can be used in the remove_shipments endpoint.
   */
  objectId: string;
  /**
   * Object ID of the shipment object created for this batch shipment.
   */
  shipment: string;
  /**
   * `INVALID` batch shipments cannot be purchased and will have to be removed, fixed, and added to the batch again.<br>
   *
   * @remarks
   * `VALID` batch shipments can be purchased. <br>
   * Batch shipments with the status `TRANSACTION_FAILED` were not able to be purchased and the error will be displayed on the message field<br>
   * `INCOMPLETE` batch shipments have an issue with the Address and will need to be removed, fixed, and added to the batch again.
   */
  status: Status;
  /**
   * Object ID of the transaction object created for this batch shipment.
   */
  transaction?: string | undefined;
};

/** @internal */
export const Status$inboundSchema: z.ZodNativeEnum<typeof Status> = z
  .nativeEnum(Status);

/** @internal */
export const Status$outboundSchema: z.ZodNativeEnum<typeof Status> =
  Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Status$ {
  /** @deprecated use `Status$inboundSchema` instead. */
  export const inboundSchema = Status$inboundSchema;
  /** @deprecated use `Status$outboundSchema` instead. */
  export const outboundSchema = Status$outboundSchema;
}

/** @internal */
export const BatchShipment$inboundSchema: z.ZodType<
  BatchShipment,
  z.ZodTypeDef,
  unknown
> = z.object({
  carrier_account: z.string().optional(),
  metadata: z.string().optional(),
  servicelevel_token: z.string().optional(),
  messages: z.array(z.any()).optional(),
  object_id: z.string(),
  shipment: z.string(),
  status: Status$inboundSchema,
  transaction: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "carrier_account": "carrierAccount",
    "servicelevel_token": "servicelevelToken",
    "object_id": "objectId",
  });
});

/** @internal */
export type BatchShipment$Outbound = {
  carrier_account?: string | undefined;
  metadata?: string | undefined;
  servicelevel_token?: string | undefined;
  messages?: Array<any> | undefined;
  object_id: string;
  shipment: string;
  status: string;
  transaction?: string | undefined;
};

/** @internal */
export const BatchShipment$outboundSchema: z.ZodType<
  BatchShipment$Outbound,
  z.ZodTypeDef,
  BatchShipment
> = z.object({
  carrierAccount: z.string().optional(),
  metadata: z.string().optional(),
  servicelevelToken: z.string().optional(),
  messages: z.array(z.any()).optional(),
  objectId: z.string(),
  shipment: z.string(),
  status: Status$outboundSchema,
  transaction: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    carrierAccount: "carrier_account",
    servicelevelToken: "servicelevel_token",
    objectId: "object_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BatchShipment$ {
  /** @deprecated use `BatchShipment$inboundSchema` instead. */
  export const inboundSchema = BatchShipment$inboundSchema;
  /** @deprecated use `BatchShipment$outboundSchema` instead. */
  export const outboundSchema = BatchShipment$outboundSchema;
  /** @deprecated use `BatchShipment$Outbound` instead. */
  export type Outbound = BatchShipment$Outbound;
}
