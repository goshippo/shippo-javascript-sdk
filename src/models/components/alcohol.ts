/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";

/**
 * Mandatory for Fedex only. License type of the recipient of the Alcohol Package.
 */
export const RecipientType = {
  Licensee: "licensee",
  Consumer: "consumer",
} as const;
/**
 * Mandatory for Fedex only. License type of the recipient of the Alcohol Package.
 */
export type RecipientType = ClosedEnum<typeof RecipientType>;

/**
 * Indicates that a shipment contains Alcohol (Fedex and UPS only).
 */
export type Alcohol = {
  /**
   * Mandatory for Fedex and UPS. Specifies that the package contains Alcohol.
   */
  containsAlcohol?: boolean | undefined;
  /**
   * Mandatory for Fedex only. License type of the recipient of the Alcohol Package.
   */
  recipientType?: RecipientType | undefined;
};

/** @internal */
export const RecipientType$inboundSchema: z.ZodNativeEnum<
  typeof RecipientType
> = z.nativeEnum(RecipientType);

/** @internal */
export const RecipientType$outboundSchema: z.ZodNativeEnum<
  typeof RecipientType
> = RecipientType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientType$ {
  /** @deprecated use `RecipientType$inboundSchema` instead. */
  export const inboundSchema = RecipientType$inboundSchema;
  /** @deprecated use `RecipientType$outboundSchema` instead. */
  export const outboundSchema = RecipientType$outboundSchema;
}

/** @internal */
export const Alcohol$inboundSchema: z.ZodType<Alcohol, z.ZodTypeDef, unknown> =
  z.object({
    contains_alcohol: z.boolean().optional(),
    recipient_type: RecipientType$inboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      "contains_alcohol": "containsAlcohol",
      "recipient_type": "recipientType",
    });
  });

/** @internal */
export type Alcohol$Outbound = {
  contains_alcohol?: boolean | undefined;
  recipient_type?: string | undefined;
};

/** @internal */
export const Alcohol$outboundSchema: z.ZodType<
  Alcohol$Outbound,
  z.ZodTypeDef,
  Alcohol
> = z.object({
  containsAlcohol: z.boolean().optional(),
  recipientType: RecipientType$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    containsAlcohol: "contains_alcohol",
    recipientType: "recipient_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Alcohol$ {
  /** @deprecated use `Alcohol$inboundSchema` instead. */
  export const inboundSchema = Alcohol$inboundSchema;
  /** @deprecated use `Alcohol$outboundSchema` instead. */
  export const outboundSchema = Alcohol$outboundSchema;
  /** @deprecated use `Alcohol$Outbound` instead. */
  export type Outbound = Alcohol$Outbound;
}
