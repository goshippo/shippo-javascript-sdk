/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import {
  TrackingStatusEnum,
  TrackingStatusEnum$inboundSchema,
  TrackingStatusEnum$outboundSchema,
} from "./trackingstatusenum.js";
import {
  TrackingStatusLocationBase,
  TrackingStatusLocationBase$inboundSchema,
  TrackingStatusLocationBase$Outbound,
  TrackingStatusLocationBase$outboundSchema,
} from "./trackingstatuslocationbase.js";
import {
  TrackingStatusSubstatus,
  TrackingStatusSubstatus$inboundSchema,
  TrackingStatusSubstatus$Outbound,
  TrackingStatusSubstatus$outboundSchema,
} from "./trackingstatussubstatus.js";

/**
 * The latest tracking information of this shipment.
 */
export type TrackingStatus = {
  /**
   * An object containing zip, city, state and country information of the tracking event.
   */
  location?: TrackingStatusLocationBase | undefined;
  objectCreated: Date;
  objectId: string;
  objectUpdated: Date;
  /**
   * Indicates the high level status of the shipment.
   */
  status: TrackingStatusEnum;
  /**
   * A finer-grained classification of the tracking event.
   */
  substatus?: TrackingStatusSubstatus | undefined;
  /**
   * Date and time when the carrier scanned this tracking event. This is displayed in UTC.
   */
  statusDate?: Date | undefined;
  /**
   * The human-readable description of the status.
   */
  statusDetails: string;
};

/** @internal */
export const TrackingStatus$inboundSchema: z.ZodType<
  TrackingStatus,
  z.ZodTypeDef,
  unknown
> = z.object({
  location: TrackingStatusLocationBase$inboundSchema.optional(),
  object_created: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ),
  object_id: z.string(),
  object_updated: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ),
  status: TrackingStatusEnum$inboundSchema,
  substatus: TrackingStatusSubstatus$inboundSchema.optional(),
  status_date: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  status_details: z.string(),
}).transform((v) => {
  return remap$(v, {
    "object_created": "objectCreated",
    "object_id": "objectId",
    "object_updated": "objectUpdated",
    "status_date": "statusDate",
    "status_details": "statusDetails",
  });
});

/** @internal */
export type TrackingStatus$Outbound = {
  location?: TrackingStatusLocationBase$Outbound | undefined;
  object_created: string;
  object_id: string;
  object_updated: string;
  status: string;
  substatus?: TrackingStatusSubstatus$Outbound | undefined;
  status_date?: string | undefined;
  status_details: string;
};

/** @internal */
export const TrackingStatus$outboundSchema: z.ZodType<
  TrackingStatus$Outbound,
  z.ZodTypeDef,
  TrackingStatus
> = z.object({
  location: TrackingStatusLocationBase$outboundSchema.optional(),
  objectCreated: z.date().transform(v => v.toISOString()),
  objectId: z.string(),
  objectUpdated: z.date().transform(v => v.toISOString()),
  status: TrackingStatusEnum$outboundSchema,
  substatus: TrackingStatusSubstatus$outboundSchema.optional(),
  statusDate: z.date().transform(v => v.toISOString()).optional(),
  statusDetails: z.string(),
}).transform((v) => {
  return remap$(v, {
    objectCreated: "object_created",
    objectId: "object_id",
    objectUpdated: "object_updated",
    statusDate: "status_date",
    statusDetails: "status_details",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TrackingStatus$ {
  /** @deprecated use `TrackingStatus$inboundSchema` instead. */
  export const inboundSchema = TrackingStatus$inboundSchema;
  /** @deprecated use `TrackingStatus$outboundSchema` instead. */
  export const outboundSchema = TrackingStatus$outboundSchema;
  /** @deprecated use `TrackingStatus$Outbound` instead. */
  export type Outbound = TrackingStatus$Outbound;
}
