/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type TrackingStatusLocationBase = {
  city?: string | undefined;
  country?: string | undefined;
  state?: string | undefined;
  zip?: string | undefined;
};

/** @internal */
export const TrackingStatusLocationBase$inboundSchema: z.ZodType<
  TrackingStatusLocationBase,
  z.ZodTypeDef,
  unknown
> = z.object({
  city: z.string().optional(),
  country: z.string().optional(),
  state: z.string().optional(),
  zip: z.string().optional(),
});

/** @internal */
export type TrackingStatusLocationBase$Outbound = {
  city?: string | undefined;
  country?: string | undefined;
  state?: string | undefined;
  zip?: string | undefined;
};

/** @internal */
export const TrackingStatusLocationBase$outboundSchema: z.ZodType<
  TrackingStatusLocationBase$Outbound,
  z.ZodTypeDef,
  TrackingStatusLocationBase
> = z.object({
  city: z.string().optional(),
  country: z.string().optional(),
  state: z.string().optional(),
  zip: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TrackingStatusLocationBase$ {
  /** @deprecated use `TrackingStatusLocationBase$inboundSchema` instead. */
  export const inboundSchema = TrackingStatusLocationBase$inboundSchema;
  /** @deprecated use `TrackingStatusLocationBase$outboundSchema` instead. */
  export const outboundSchema = TrackingStatusLocationBase$outboundSchema;
  /** @deprecated use `TrackingStatusLocationBase$Outbound` instead. */
  export type Outbound = TrackingStatusLocationBase$Outbound;
}

export function trackingStatusLocationBaseToJSON(
  trackingStatusLocationBase: TrackingStatusLocationBase,
): string {
  return JSON.stringify(
    TrackingStatusLocationBase$outboundSchema.parse(trackingStatusLocationBase),
  );
}

export function trackingStatusLocationBaseFromJSON(
  jsonString: string,
): SafeParseResult<TrackingStatusLocationBase, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TrackingStatusLocationBase$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TrackingStatusLocationBase' from JSON`,
  );
}
