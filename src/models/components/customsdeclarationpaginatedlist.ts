/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { CustomsDeclaration, CustomsDeclaration$ } from "./customsdeclaration";
import * as z from "zod";

export type CustomsDeclarationPaginatedList = {
    next?: string | undefined;
    previous?: string | undefined;
    results?: Array<CustomsDeclaration> | undefined;
};

/** @internal */
export namespace CustomsDeclarationPaginatedList$ {
    export type Inbound = {
        next?: string | undefined;
        previous?: string | undefined;
        results?: Array<CustomsDeclaration$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<CustomsDeclarationPaginatedList, z.ZodTypeDef, Inbound> =
        z
            .object({
                next: z.string().optional(),
                previous: z.string().optional(),
                results: z.array(CustomsDeclaration$.inboundSchema).optional(),
            })
            .transform((v) => {
                return {
                    ...(v.next === undefined ? null : { next: v.next }),
                    ...(v.previous === undefined ? null : { previous: v.previous }),
                    ...(v.results === undefined ? null : { results: v.results }),
                };
            });

    export type Outbound = {
        next?: string | undefined;
        previous?: string | undefined;
        results?: Array<CustomsDeclaration$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        CustomsDeclarationPaginatedList
    > = z
        .object({
            next: z.string().optional(),
            previous: z.string().optional(),
            results: z.array(CustomsDeclaration$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.next === undefined ? null : { next: v.next }),
                ...(v.previous === undefined ? null : { previous: v.previous }),
                ...(v.results === undefined ? null : { results: v.results }),
            };
        });
}
