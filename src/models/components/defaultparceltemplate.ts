/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  UserParcelTemplate,
  UserParcelTemplate$inboundSchema,
  UserParcelTemplate$Outbound,
  UserParcelTemplate$outboundSchema,
} from "./userparceltemplate.js";

export type DefaultParcelTemplate = {
  result?: UserParcelTemplate | undefined;
};

/** @internal */
export const DefaultParcelTemplate$inboundSchema: z.ZodType<
  DefaultParcelTemplate,
  z.ZodTypeDef,
  unknown
> = z.object({
  result: UserParcelTemplate$inboundSchema.optional(),
});

/** @internal */
export type DefaultParcelTemplate$Outbound = {
  result?: UserParcelTemplate$Outbound | undefined;
};

/** @internal */
export const DefaultParcelTemplate$outboundSchema: z.ZodType<
  DefaultParcelTemplate$Outbound,
  z.ZodTypeDef,
  DefaultParcelTemplate
> = z.object({
  result: UserParcelTemplate$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DefaultParcelTemplate$ {
  /** @deprecated use `DefaultParcelTemplate$inboundSchema` instead. */
  export const inboundSchema = DefaultParcelTemplate$inboundSchema;
  /** @deprecated use `DefaultParcelTemplate$outboundSchema` instead. */
  export const outboundSchema = DefaultParcelTemplate$outboundSchema;
  /** @deprecated use `DefaultParcelTemplate$Outbound` instead. */
  export type Outbound = DefaultParcelTemplate$Outbound;
}

export function defaultParcelTemplateToJSON(
  defaultParcelTemplate: DefaultParcelTemplate,
): string {
  return JSON.stringify(
    DefaultParcelTemplate$outboundSchema.parse(defaultParcelTemplate),
  );
}

export function defaultParcelTemplateFromJSON(
  jsonString: string,
): SafeParseResult<DefaultParcelTemplate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DefaultParcelTemplate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DefaultParcelTemplate' from JSON`,
  );
}
