/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

/**
 * Contains details regarding the service level for the given rate.
 */
export type ServiceLevel = {
    /**
     * Name of the Rate's servicelevel, e.g. `International Priority` or `Standard Post`.
     *
     * @remarks
     * A servicelevel commonly defines the transit time of a Shipment (e.g., Express vs. Standard), along with other properties.
     * These names vary depending on the provider.
     */
    name?: string | undefined;
    /**
     * Further clarification of the service.
     */
    terms?: string | undefined;
    /**
     * Token of the Rate's servicelevel, e.g. `usps_priority` or `fedex_ground`.
     *
     * @remarks
     * See <a href="#tag/Service-Levels">servicelevels</a>.
     */
    token?: string | undefined;
    /**
     * Unique, extended version of the Service Level "token".
     *
     * @remarks
     * Guaranteed to be unique across all Service Levels, and may help offer insight into the specific Service Level it describes.
     */
    extendedToken?: string | undefined;
};

/** @internal */
export namespace ServiceLevel$ {
    export const inboundSchema: z.ZodType<ServiceLevel, z.ZodTypeDef, unknown> = z
        .object({
            name: z.string().optional(),
            terms: z.string().optional(),
            token: z.string().optional(),
            extended_token: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                extended_token: "extendedToken",
            });
        });

    export type Outbound = {
        name?: string | undefined;
        terms?: string | undefined;
        token?: string | undefined;
        extended_token?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ServiceLevel> = z
        .object({
            name: z.string().optional(),
            terms: z.string().optional(),
            token: z.string().optional(),
            extendedToken: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                extendedToken: "extended_token",
            });
        });
}
