/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import {
  WebhookPayloadBatch,
  WebhookPayloadBatch$inboundSchema,
  WebhookPayloadBatch$Outbound,
  WebhookPayloadBatch$outboundSchema,
} from "./webhookpayloadbatch.js";
import {
  WebhookPayloadTrack,
  WebhookPayloadTrack$inboundSchema,
  WebhookPayloadTrack$Outbound,
  WebhookPayloadTrack$outboundSchema,
} from "./webhookpayloadtrack.js";
import {
  WebhookPayloadTransaction,
  WebhookPayloadTransaction$inboundSchema,
  WebhookPayloadTransaction$Outbound,
  WebhookPayloadTransaction$outboundSchema,
} from "./webhookpayloadtransaction.js";

export type WebhookPayload =
  | (WebhookPayloadTrack & { event: "track_updated" })
  | (WebhookPayloadBatch & { event: "batch_created" })
  | (WebhookPayloadBatch & { event: "batch_purchased" })
  | (WebhookPayloadTransaction & { event: "transaction_created" })
  | (WebhookPayloadTransaction & { event: "transaction_updated" });

/** @internal */
export const WebhookPayload$inboundSchema: z.ZodType<
  WebhookPayload,
  z.ZodTypeDef,
  unknown
> = z.union([
  WebhookPayloadTrack$inboundSchema.and(
    z.object({ event: z.literal("track_updated") }).transform((v) => ({
      event: v.event,
    })),
  ),
  WebhookPayloadBatch$inboundSchema.and(
    z.object({ event: z.literal("batch_created") }).transform((v) => ({
      event: v.event,
    })),
  ),
  WebhookPayloadBatch$inboundSchema.and(
    z.object({ event: z.literal("batch_purchased") }).transform((v) => ({
      event: v.event,
    })),
  ),
  WebhookPayloadTransaction$inboundSchema.and(
    z.object({ event: z.literal("transaction_created") }).transform((v) => ({
      event: v.event,
    })),
  ),
  WebhookPayloadTransaction$inboundSchema.and(
    z.object({ event: z.literal("transaction_updated") }).transform((v) => ({
      event: v.event,
    })),
  ),
]);

/** @internal */
export type WebhookPayload$Outbound =
  | (WebhookPayloadTrack$Outbound & { event: "track_updated" })
  | (WebhookPayloadBatch$Outbound & { event: "batch_created" })
  | (WebhookPayloadBatch$Outbound & { event: "batch_purchased" })
  | (WebhookPayloadTransaction$Outbound & { event: "transaction_created" })
  | (WebhookPayloadTransaction$Outbound & { event: "transaction_updated" });

/** @internal */
export const WebhookPayload$outboundSchema: z.ZodType<
  WebhookPayload$Outbound,
  z.ZodTypeDef,
  WebhookPayload
> = z.union([
  WebhookPayloadTrack$outboundSchema.and(
    z.object({ event: z.literal("track_updated") }).transform((v) => ({
      event: v.event,
    })),
  ),
  WebhookPayloadBatch$outboundSchema.and(
    z.object({ event: z.literal("batch_created") }).transform((v) => ({
      event: v.event,
    })),
  ),
  WebhookPayloadBatch$outboundSchema.and(
    z.object({ event: z.literal("batch_purchased") }).transform((v) => ({
      event: v.event,
    })),
  ),
  WebhookPayloadTransaction$outboundSchema.and(
    z.object({ event: z.literal("transaction_created") }).transform((v) => ({
      event: v.event,
    })),
  ),
  WebhookPayloadTransaction$outboundSchema.and(
    z.object({ event: z.literal("transaction_updated") }).transform((v) => ({
      event: v.event,
    })),
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WebhookPayload$ {
  /** @deprecated use `WebhookPayload$inboundSchema` instead. */
  export const inboundSchema = WebhookPayload$inboundSchema;
  /** @deprecated use `WebhookPayload$outboundSchema` instead. */
  export const outboundSchema = WebhookPayload$outboundSchema;
  /** @deprecated use `WebhookPayload$Outbound` instead. */
  export type Outbound = WebhookPayload$Outbound;
}
