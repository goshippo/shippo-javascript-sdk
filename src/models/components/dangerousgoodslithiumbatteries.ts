/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Container for specifying the presence of lithium batteries.
 */
export type DangerousGoodsLithiumBatteries = {
  /**
   * Indicates if the shipment contains lithium batteries.
   */
  contains?: boolean | undefined;
};

/** @internal */
export const DangerousGoodsLithiumBatteries$inboundSchema: z.ZodType<
  DangerousGoodsLithiumBatteries,
  z.ZodTypeDef,
  unknown
> = z.object({
  contains: z.boolean().optional(),
});

/** @internal */
export type DangerousGoodsLithiumBatteries$Outbound = {
  contains?: boolean | undefined;
};

/** @internal */
export const DangerousGoodsLithiumBatteries$outboundSchema: z.ZodType<
  DangerousGoodsLithiumBatteries$Outbound,
  z.ZodTypeDef,
  DangerousGoodsLithiumBatteries
> = z.object({
  contains: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DangerousGoodsLithiumBatteries$ {
  /** @deprecated use `DangerousGoodsLithiumBatteries$inboundSchema` instead. */
  export const inboundSchema = DangerousGoodsLithiumBatteries$inboundSchema;
  /** @deprecated use `DangerousGoodsLithiumBatteries$outboundSchema` instead. */
  export const outboundSchema = DangerousGoodsLithiumBatteries$outboundSchema;
  /** @deprecated use `DangerousGoodsLithiumBatteries$Outbound` instead. */
  export type Outbound = DangerousGoodsLithiumBatteries$Outbound;
}

export function dangerousGoodsLithiumBatteriesToJSON(
  dangerousGoodsLithiumBatteries: DangerousGoodsLithiumBatteries,
): string {
  return JSON.stringify(
    DangerousGoodsLithiumBatteries$outboundSchema.parse(
      dangerousGoodsLithiumBatteries,
    ),
  );
}

export function dangerousGoodsLithiumBatteriesFromJSON(
  jsonString: string,
): SafeParseResult<DangerousGoodsLithiumBatteries, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DangerousGoodsLithiumBatteries$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DangerousGoodsLithiumBatteries' from JSON`,
  );
}
