/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

export type CarrierAccountRegistrationStatus = {
    carrierAccount?: string | undefined;
    objectCreated?: Date | undefined;
    objectOwner?: string | undefined;
    objectUpdated?: Date | undefined;
    status?: string | undefined;
};

/** @internal */
export namespace CarrierAccountRegistrationStatus$ {
    export const inboundSchema: z.ZodType<CarrierAccountRegistrationStatus, z.ZodTypeDef, unknown> =
        z
            .object({
                carrier_account: z.string().optional(),
                object_created: z
                    .string()
                    .datetime({ offset: true })
                    .transform((v) => new Date(v))
                    .optional(),
                object_owner: z.string().optional(),
                object_updated: z
                    .string()
                    .datetime({ offset: true })
                    .transform((v) => new Date(v))
                    .optional(),
                status: z.string().optional(),
            })
            .transform((v) => {
                return remap$(v, {
                    carrier_account: "carrierAccount",
                    object_created: "objectCreated",
                    object_owner: "objectOwner",
                    object_updated: "objectUpdated",
                });
            });

    export type Outbound = {
        carrier_account?: string | undefined;
        object_created?: string | undefined;
        object_owner?: string | undefined;
        object_updated?: string | undefined;
        status?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        CarrierAccountRegistrationStatus
    > = z
        .object({
            carrierAccount: z.string().optional(),
            objectCreated: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            objectOwner: z.string().optional(),
            objectUpdated: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            status: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                carrierAccount: "carrier_account",
                objectCreated: "object_created",
                objectOwner: "object_owner",
                objectUpdated: "object_updated",
            });
        });
}
