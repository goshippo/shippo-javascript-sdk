/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  UserParcelTemplate,
  UserParcelTemplate$inboundSchema,
  UserParcelTemplate$Outbound,
  UserParcelTemplate$outboundSchema,
} from "./userparceltemplate.js";

export type UserParcelTemplateList = {
  results?: Array<UserParcelTemplate> | undefined;
};

/** @internal */
export const UserParcelTemplateList$inboundSchema: z.ZodType<
  UserParcelTemplateList,
  z.ZodTypeDef,
  unknown
> = z.object({
  results: z.array(UserParcelTemplate$inboundSchema).optional(),
});

/** @internal */
export type UserParcelTemplateList$Outbound = {
  results?: Array<UserParcelTemplate$Outbound> | undefined;
};

/** @internal */
export const UserParcelTemplateList$outboundSchema: z.ZodType<
  UserParcelTemplateList$Outbound,
  z.ZodTypeDef,
  UserParcelTemplateList
> = z.object({
  results: z.array(UserParcelTemplate$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserParcelTemplateList$ {
  /** @deprecated use `UserParcelTemplateList$inboundSchema` instead. */
  export const inboundSchema = UserParcelTemplateList$inboundSchema;
  /** @deprecated use `UserParcelTemplateList$outboundSchema` instead. */
  export const outboundSchema = UserParcelTemplateList$outboundSchema;
  /** @deprecated use `UserParcelTemplateList$Outbound` instead. */
  export type Outbound = UserParcelTemplateList$Outbound;
}

export function userParcelTemplateListToJSON(
  userParcelTemplateList: UserParcelTemplateList,
): string {
  return JSON.stringify(
    UserParcelTemplateList$outboundSchema.parse(userParcelTemplateList),
  );
}

export function userParcelTemplateListFromJSON(
  jsonString: string,
): SafeParseResult<UserParcelTemplateList, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UserParcelTemplateList$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UserParcelTemplateList' from JSON`,
  );
}
