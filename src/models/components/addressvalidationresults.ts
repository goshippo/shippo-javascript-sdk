/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
    AddressValidationResultsMessage,
    AddressValidationResultsMessage$,
} from "./addressvalidationresultsmessage";
import * as z from "zod";

/**
 * Object that contains information regarding if an address had been validated or not. Also contains any messages
 *
 * @remarks
 * generated during validation. Children keys are <code>is_valid</code>(boolean) and <code>messages</code>(array).
 */
export type AddressValidationResults = {
    isValid?: boolean | undefined;
    messages?: Array<AddressValidationResultsMessage> | undefined;
};

/** @internal */
export namespace AddressValidationResults$ {
    export type Inbound = {
        is_valid?: boolean | undefined;
        messages?: Array<AddressValidationResultsMessage$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<AddressValidationResults, z.ZodTypeDef, Inbound> = z
        .object({
            is_valid: z.boolean().optional(),
            messages: z.array(AddressValidationResultsMessage$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.is_valid === undefined ? null : { isValid: v.is_valid }),
                ...(v.messages === undefined ? null : { messages: v.messages }),
            };
        });

    export type Outbound = {
        is_valid?: boolean | undefined;
        messages?: Array<AddressValidationResultsMessage$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AddressValidationResults> = z
        .object({
            isValid: z.boolean().optional(),
            messages: z.array(AddressValidationResultsMessage$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.isValid === undefined ? null : { is_valid: v.isValid }),
                ...(v.messages === undefined ? null : { messages: v.messages }),
            };
        });
}
