/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import {
  AddressImporter,
  AddressImporter$inboundSchema,
  AddressImporter$Outbound,
  AddressImporter$outboundSchema,
} from "./addressimporter.js";
import {
  CustomsDeclarationB13AFilingOptionEnum,
  CustomsDeclarationB13AFilingOptionEnum$inboundSchema,
  CustomsDeclarationB13AFilingOptionEnum$outboundSchema,
} from "./customsdeclarationb13afilingoptionenum.js";
import {
  CustomsDeclarationContentsTypeEnum,
  CustomsDeclarationContentsTypeEnum$inboundSchema,
  CustomsDeclarationContentsTypeEnum$outboundSchema,
} from "./customsdeclarationcontentstypeenum.js";
import {
  CustomsDeclarationEelPfcEnum,
  CustomsDeclarationEelPfcEnum$inboundSchema,
  CustomsDeclarationEelPfcEnum$outboundSchema,
} from "./customsdeclarationeelpfcenum.js";
import {
  CustomsDeclarationIncotermEnum,
  CustomsDeclarationIncotermEnum$inboundSchema,
  CustomsDeclarationIncotermEnum$outboundSchema,
} from "./customsdeclarationincotermenum.js";
import {
  CustomsDeclarationNonDeliveryOptionEnum,
  CustomsDeclarationNonDeliveryOptionEnum$inboundSchema,
  CustomsDeclarationNonDeliveryOptionEnum$outboundSchema,
} from "./customsdeclarationnondeliveryoptionenum.js";
import {
  CustomsExporterIdentification,
  CustomsExporterIdentification$inboundSchema,
  CustomsExporterIdentification$Outbound,
  CustomsExporterIdentification$outboundSchema,
} from "./customsexporteridentification.js";
import {
  CustomsItemCreateRequest,
  CustomsItemCreateRequest$inboundSchema,
  CustomsItemCreateRequest$Outbound,
  CustomsItemCreateRequest$outboundSchema,
} from "./customsitemcreaterequest.js";

/**
 * Party to be billed for duties.
 */
export const CustomsDeclarationCreateRequestType = {
  Sender: "SENDER",
  Recipient: "RECIPIENT",
  ThirdParty: "THIRD_PARTY",
} as const;
/**
 * Party to be billed for duties.
 */
export type CustomsDeclarationCreateRequestType = ClosedEnum<
  typeof CustomsDeclarationCreateRequestType
>;

export type CustomsDeclarationCreateRequestAddress = {
  /**
   * Name of the party to be billed for duties.
   */
  name?: string | undefined;
  /**
   * Postal code of the party to be billed for duties.
   */
  zip?: string | undefined;
  /**
   * Country ISO code of account number to be billed.
   */
  country?: string | undefined;
};

/**
 * Specifies who will pay the duties for the shipment. Only accepted for FedEx shipments.
 */
export type DutiesPayor = {
  /**
   * Account number to be billed for duties.
   */
  account?: string | undefined;
  /**
   * Party to be billed for duties.
   */
  type?: CustomsDeclarationCreateRequestType | undefined;
  address?: CustomsDeclarationCreateRequestAddress | undefined;
};

export type CustomsDeclarationCreateRequest = {
  /**
   * **required if eel_pfc is `AES_ITN`**<br>
   *
   * @remarks
   * AES / ITN reference of the shipment.
   */
  aesItn?: string | undefined;
  b13aFilingOption?: CustomsDeclarationB13AFilingOptionEnum | undefined;
  /**
   * **must be provided if and only if b13a_filing_option is provided**<br>
   *
   * @remarks
   * Represents:<br> the Proof of Report (POR) Number when b13a_filing_option is `FILED_ELECTRONICALLY`;<br>
   * the Summary ID Number when b13a_filing_option is `SUMMARY_REPORTING`;<br>
   * or the Exemption Number when b13a_filing_option is `NOT_REQUIRED`.
   */
  b13aNumber?: string | undefined;
  /**
   * Certificate reference of the shipment.
   */
  certificate?: string | undefined;
  /**
   * Expresses that the certify_signer has provided all information of this customs declaration truthfully.
   */
  certify: boolean;
  /**
   * Name of the person who created the customs declaration and is responsible for the validity of all
   *
   * @remarks
   * information provided.
   */
  certifySigner: string;
  commercialInvoice?: boolean | undefined;
  /**
   * **required if contents_type is `OTHER`**<br>
   *
   * @remarks
   * Explanation of the type of goods of the shipment.
   */
  contentsExplanation?: string | undefined;
  /**
   * Disclaimer for the shipment and customs information that have been provided.
   */
  disclaimer?: string | undefined;
  /**
   * Specifies who will pay the duties for the shipment. Only accepted for FedEx shipments.
   */
  dutiesPayor?: DutiesPayor | undefined;
  /**
   * Additional exporter identification that may be required to ship in certain countries
   */
  exporterIdentification?: CustomsExporterIdentification | undefined;
  /**
   * Exporter reference of an export shipment.
   */
  exporterReference?: string | undefined;
  /**
   * Importer reference of an import shipment.
   */
  importerReference?: string | undefined;
  /**
   * Indicates whether the shipment's destination VAT has been collected. May be required for some destinations.
   */
  isVatCollected?: boolean | undefined;
  /**
   * Invoice reference of the shipment.
   */
  invoice?: string | undefined;
  /**
   * License reference of the shipment.
   */
  license?: string | undefined;
  /**
   * A string of up to 100 characters that can be filled with any additional information you
   *
   * @remarks
   * want to attach to the object.
   */
  metadata?: string | undefined;
  /**
   * Additional notes to be included in the customs declaration.
   */
  notes?: string | undefined;
  /**
   * Object that represents the address of the importer
   */
  addressImporter?: AddressImporter | undefined;
  contentsType: CustomsDeclarationContentsTypeEnum;
  eelPfc?: CustomsDeclarationEelPfcEnum | undefined;
  incoterm?: CustomsDeclarationIncotermEnum | undefined;
  items: Array<CustomsItemCreateRequest>;
  nonDeliveryOption: CustomsDeclarationNonDeliveryOptionEnum;
  test?: boolean | undefined;
};

/** @internal */
export const CustomsDeclarationCreateRequestType$inboundSchema: z.ZodNativeEnum<
  typeof CustomsDeclarationCreateRequestType
> = z.nativeEnum(CustomsDeclarationCreateRequestType);

/** @internal */
export const CustomsDeclarationCreateRequestType$outboundSchema:
  z.ZodNativeEnum<typeof CustomsDeclarationCreateRequestType> =
    CustomsDeclarationCreateRequestType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomsDeclarationCreateRequestType$ {
  /** @deprecated use `CustomsDeclarationCreateRequestType$inboundSchema` instead. */
  export const inboundSchema =
    CustomsDeclarationCreateRequestType$inboundSchema;
  /** @deprecated use `CustomsDeclarationCreateRequestType$outboundSchema` instead. */
  export const outboundSchema =
    CustomsDeclarationCreateRequestType$outboundSchema;
}

/** @internal */
export const CustomsDeclarationCreateRequestAddress$inboundSchema: z.ZodType<
  CustomsDeclarationCreateRequestAddress,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  zip: z.string().optional(),
  country: z.string().optional(),
});

/** @internal */
export type CustomsDeclarationCreateRequestAddress$Outbound = {
  name?: string | undefined;
  zip?: string | undefined;
  country?: string | undefined;
};

/** @internal */
export const CustomsDeclarationCreateRequestAddress$outboundSchema: z.ZodType<
  CustomsDeclarationCreateRequestAddress$Outbound,
  z.ZodTypeDef,
  CustomsDeclarationCreateRequestAddress
> = z.object({
  name: z.string().optional(),
  zip: z.string().optional(),
  country: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomsDeclarationCreateRequestAddress$ {
  /** @deprecated use `CustomsDeclarationCreateRequestAddress$inboundSchema` instead. */
  export const inboundSchema =
    CustomsDeclarationCreateRequestAddress$inboundSchema;
  /** @deprecated use `CustomsDeclarationCreateRequestAddress$outboundSchema` instead. */
  export const outboundSchema =
    CustomsDeclarationCreateRequestAddress$outboundSchema;
  /** @deprecated use `CustomsDeclarationCreateRequestAddress$Outbound` instead. */
  export type Outbound = CustomsDeclarationCreateRequestAddress$Outbound;
}

/** @internal */
export const DutiesPayor$inboundSchema: z.ZodType<
  DutiesPayor,
  z.ZodTypeDef,
  unknown
> = z.object({
  account: z.string().optional(),
  type: CustomsDeclarationCreateRequestType$inboundSchema.optional(),
  address: z.lazy(() => CustomsDeclarationCreateRequestAddress$inboundSchema)
    .optional(),
});

/** @internal */
export type DutiesPayor$Outbound = {
  account?: string | undefined;
  type?: string | undefined;
  address?: CustomsDeclarationCreateRequestAddress$Outbound | undefined;
};

/** @internal */
export const DutiesPayor$outboundSchema: z.ZodType<
  DutiesPayor$Outbound,
  z.ZodTypeDef,
  DutiesPayor
> = z.object({
  account: z.string().optional(),
  type: CustomsDeclarationCreateRequestType$outboundSchema.optional(),
  address: z.lazy(() => CustomsDeclarationCreateRequestAddress$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DutiesPayor$ {
  /** @deprecated use `DutiesPayor$inboundSchema` instead. */
  export const inboundSchema = DutiesPayor$inboundSchema;
  /** @deprecated use `DutiesPayor$outboundSchema` instead. */
  export const outboundSchema = DutiesPayor$outboundSchema;
  /** @deprecated use `DutiesPayor$Outbound` instead. */
  export type Outbound = DutiesPayor$Outbound;
}

/** @internal */
export const CustomsDeclarationCreateRequest$inboundSchema: z.ZodType<
  CustomsDeclarationCreateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  aes_itn: z.string().optional(),
  b13a_filing_option: CustomsDeclarationB13AFilingOptionEnum$inboundSchema
    .optional(),
  b13a_number: z.string().optional(),
  certificate: z.string().optional(),
  certify: z.boolean(),
  certify_signer: z.string(),
  commercial_invoice: z.boolean().optional(),
  contents_explanation: z.string().optional(),
  disclaimer: z.string().optional(),
  duties_payor: z.lazy(() => DutiesPayor$inboundSchema).optional(),
  exporter_identification: CustomsExporterIdentification$inboundSchema
    .optional(),
  exporter_reference: z.string().optional(),
  importer_reference: z.string().optional(),
  is_vat_collected: z.boolean().optional(),
  invoice: z.string().optional(),
  license: z.string().optional(),
  metadata: z.string().optional(),
  notes: z.string().optional(),
  address_importer: AddressImporter$inboundSchema.optional(),
  contents_type: CustomsDeclarationContentsTypeEnum$inboundSchema,
  eel_pfc: CustomsDeclarationEelPfcEnum$inboundSchema.optional(),
  incoterm: CustomsDeclarationIncotermEnum$inboundSchema.optional(),
  items: z.array(CustomsItemCreateRequest$inboundSchema),
  non_delivery_option: CustomsDeclarationNonDeliveryOptionEnum$inboundSchema,
  test: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "aes_itn": "aesItn",
    "b13a_filing_option": "b13aFilingOption",
    "b13a_number": "b13aNumber",
    "certify_signer": "certifySigner",
    "commercial_invoice": "commercialInvoice",
    "contents_explanation": "contentsExplanation",
    "duties_payor": "dutiesPayor",
    "exporter_identification": "exporterIdentification",
    "exporter_reference": "exporterReference",
    "importer_reference": "importerReference",
    "is_vat_collected": "isVatCollected",
    "address_importer": "addressImporter",
    "contents_type": "contentsType",
    "eel_pfc": "eelPfc",
    "non_delivery_option": "nonDeliveryOption",
  });
});

/** @internal */
export type CustomsDeclarationCreateRequest$Outbound = {
  aes_itn?: string | undefined;
  b13a_filing_option?: string | undefined;
  b13a_number?: string | undefined;
  certificate?: string | undefined;
  certify: boolean;
  certify_signer: string;
  commercial_invoice?: boolean | undefined;
  contents_explanation?: string | undefined;
  disclaimer?: string | undefined;
  duties_payor?: DutiesPayor$Outbound | undefined;
  exporter_identification?: CustomsExporterIdentification$Outbound | undefined;
  exporter_reference?: string | undefined;
  importer_reference?: string | undefined;
  is_vat_collected?: boolean | undefined;
  invoice?: string | undefined;
  license?: string | undefined;
  metadata?: string | undefined;
  notes?: string | undefined;
  address_importer?: AddressImporter$Outbound | undefined;
  contents_type: string;
  eel_pfc?: string | undefined;
  incoterm?: string | undefined;
  items: Array<CustomsItemCreateRequest$Outbound>;
  non_delivery_option: string;
  test?: boolean | undefined;
};

/** @internal */
export const CustomsDeclarationCreateRequest$outboundSchema: z.ZodType<
  CustomsDeclarationCreateRequest$Outbound,
  z.ZodTypeDef,
  CustomsDeclarationCreateRequest
> = z.object({
  aesItn: z.string().optional(),
  b13aFilingOption: CustomsDeclarationB13AFilingOptionEnum$outboundSchema
    .optional(),
  b13aNumber: z.string().optional(),
  certificate: z.string().optional(),
  certify: z.boolean(),
  certifySigner: z.string(),
  commercialInvoice: z.boolean().optional(),
  contentsExplanation: z.string().optional(),
  disclaimer: z.string().optional(),
  dutiesPayor: z.lazy(() => DutiesPayor$outboundSchema).optional(),
  exporterIdentification: CustomsExporterIdentification$outboundSchema
    .optional(),
  exporterReference: z.string().optional(),
  importerReference: z.string().optional(),
  isVatCollected: z.boolean().optional(),
  invoice: z.string().optional(),
  license: z.string().optional(),
  metadata: z.string().optional(),
  notes: z.string().optional(),
  addressImporter: AddressImporter$outboundSchema.optional(),
  contentsType: CustomsDeclarationContentsTypeEnum$outboundSchema,
  eelPfc: CustomsDeclarationEelPfcEnum$outboundSchema.optional(),
  incoterm: CustomsDeclarationIncotermEnum$outboundSchema.optional(),
  items: z.array(CustomsItemCreateRequest$outboundSchema),
  nonDeliveryOption: CustomsDeclarationNonDeliveryOptionEnum$outboundSchema,
  test: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    aesItn: "aes_itn",
    b13aFilingOption: "b13a_filing_option",
    b13aNumber: "b13a_number",
    certifySigner: "certify_signer",
    commercialInvoice: "commercial_invoice",
    contentsExplanation: "contents_explanation",
    dutiesPayor: "duties_payor",
    exporterIdentification: "exporter_identification",
    exporterReference: "exporter_reference",
    importerReference: "importer_reference",
    isVatCollected: "is_vat_collected",
    addressImporter: "address_importer",
    contentsType: "contents_type",
    eelPfc: "eel_pfc",
    nonDeliveryOption: "non_delivery_option",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomsDeclarationCreateRequest$ {
  /** @deprecated use `CustomsDeclarationCreateRequest$inboundSchema` instead. */
  export const inboundSchema = CustomsDeclarationCreateRequest$inboundSchema;
  /** @deprecated use `CustomsDeclarationCreateRequest$outboundSchema` instead. */
  export const outboundSchema = CustomsDeclarationCreateRequest$outboundSchema;
  /** @deprecated use `CustomsDeclarationCreateRequest$Outbound` instead. */
  export type Outbound = CustomsDeclarationCreateRequest$Outbound;
}
