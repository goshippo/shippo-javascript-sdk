/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { AddressImporter, AddressImporter$ } from "./addressimporter.js";
import {
    CustomsDeclarationB13AFilingOptionEnum,
    CustomsDeclarationB13AFilingOptionEnum$,
} from "./customsdeclarationb13afilingoptionenum.js";
import {
    CustomsDeclarationContentsTypeEnum,
    CustomsDeclarationContentsTypeEnum$,
} from "./customsdeclarationcontentstypeenum.js";
import {
    CustomsDeclarationEelPfcEnum,
    CustomsDeclarationEelPfcEnum$,
} from "./customsdeclarationeelpfcenum.js";
import {
    CustomsDeclarationIncotermEnum,
    CustomsDeclarationIncotermEnum$,
} from "./customsdeclarationincotermenum.js";
import {
    CustomsDeclarationNonDeliveryOptionEnum,
    CustomsDeclarationNonDeliveryOptionEnum$,
} from "./customsdeclarationnondeliveryoptionenum.js";
import {
    CustomsExporterIdentification,
    CustomsExporterIdentification$,
} from "./customsexporteridentification.js";
import { CustomsItemCreateRequest, CustomsItemCreateRequest$ } from "./customsitemcreaterequest.js";
import * as z from "zod";

export type CustomsDeclarationCreateRequest = {
    /**
     * **required if eel_pfc is `AES_ITN`**<br>
     *
     * @remarks
     * AES / ITN reference of the shipment.
     */
    aesItn?: string | undefined;
    b13aFilingOption?: CustomsDeclarationB13AFilingOptionEnum | undefined;
    /**
     * **must be provided if and only if b13a_filing_option is provided**<br>
     *
     * @remarks
     * Represents:<br> the Proof of Report (POR) Number when b13a_filing_option is `FILED_ELECTRONICALLY`;<br>
     * the Summary ID Number when b13a_filing_option is `SUMMARY_REPORTING`;<br>
     * or the Exemption Number when b13a_filing_option is `NOT_REQUIRED`.
     */
    b13aNumber?: string | undefined;
    /**
     * Certificate reference of the shipment.
     */
    certificate?: string | undefined;
    /**
     * Expresses that the certify_signer has provided all information of this customs declaration truthfully.
     */
    certify: boolean;
    /**
     * Name of the person who created the customs declaration and is responsible for the validity of all
     *
     * @remarks
     * information provided.
     */
    certifySigner: string;
    commercialInvoice?: boolean | undefined;
    /**
     * **required if contents_type is `OTHER`**<br>
     *
     * @remarks
     * Explanation of the type of goods of the shipment.
     */
    contentsExplanation?: string | undefined;
    /**
     * Disclaimer for the shipment and customs information that have been provided.
     */
    disclaimer?: string | undefined;
    /**
     * Additional exporter identification that may be required to ship in certain countries
     */
    exporterIdentification?: CustomsExporterIdentification | undefined;
    /**
     * Exporter reference of an export shipment.
     */
    exporterReference?: string | undefined;
    /**
     * Importer reference of an import shipment.
     */
    importerReference?: string | undefined;
    /**
     * Indicates whether the shipment's destination VAT has been collected. May be required for some destinations.
     */
    isVatCollected?: boolean | undefined;
    /**
     * Invoice reference of the shipment.
     */
    invoice?: string | undefined;
    /**
     * License reference of the shipment.
     */
    license?: string | undefined;
    /**
     * A string of up to 100 characters that can be filled with any additional information you
     *
     * @remarks
     * want to attach to the object.
     */
    metadata?: string | undefined;
    /**
     * Additional notes to be included in the customs declaration.
     */
    notes?: string | undefined;
    /**
     * Object that represents the address of the importer
     */
    addressImporter?: AddressImporter | undefined;
    contentsType: CustomsDeclarationContentsTypeEnum;
    eelPfc?: CustomsDeclarationEelPfcEnum | undefined;
    incoterm?: CustomsDeclarationIncotermEnum | undefined;
    items: Array<CustomsItemCreateRequest>;
    nonDeliveryOption: CustomsDeclarationNonDeliveryOptionEnum;
    test?: boolean | undefined;
};

/** @internal */
export namespace CustomsDeclarationCreateRequest$ {
    export const inboundSchema: z.ZodType<CustomsDeclarationCreateRequest, z.ZodTypeDef, unknown> =
        z
            .object({
                aes_itn: z.string().optional(),
                b13a_filing_option:
                    CustomsDeclarationB13AFilingOptionEnum$.inboundSchema.optional(),
                b13a_number: z.string().optional(),
                certificate: z.string().optional(),
                certify: z.boolean(),
                certify_signer: z.string(),
                commercial_invoice: z.boolean().optional(),
                contents_explanation: z.string().optional(),
                disclaimer: z.string().optional(),
                exporter_identification: CustomsExporterIdentification$.inboundSchema.optional(),
                exporter_reference: z.string().optional(),
                importer_reference: z.string().optional(),
                is_vat_collected: z.boolean().optional(),
                invoice: z.string().optional(),
                license: z.string().optional(),
                metadata: z.string().optional(),
                notes: z.string().optional(),
                address_importer: AddressImporter$.inboundSchema.optional(),
                contents_type: CustomsDeclarationContentsTypeEnum$.inboundSchema,
                eel_pfc: CustomsDeclarationEelPfcEnum$.inboundSchema.optional(),
                incoterm: CustomsDeclarationIncotermEnum$.inboundSchema.optional(),
                items: z.array(CustomsItemCreateRequest$.inboundSchema),
                non_delivery_option: CustomsDeclarationNonDeliveryOptionEnum$.inboundSchema,
                test: z.boolean().optional(),
            })
            .transform((v) => {
                return remap$(v, {
                    aes_itn: "aesItn",
                    b13a_filing_option: "b13aFilingOption",
                    b13a_number: "b13aNumber",
                    certify_signer: "certifySigner",
                    commercial_invoice: "commercialInvoice",
                    contents_explanation: "contentsExplanation",
                    exporter_identification: "exporterIdentification",
                    exporter_reference: "exporterReference",
                    importer_reference: "importerReference",
                    is_vat_collected: "isVatCollected",
                    address_importer: "addressImporter",
                    contents_type: "contentsType",
                    eel_pfc: "eelPfc",
                    non_delivery_option: "nonDeliveryOption",
                });
            });

    export type Outbound = {
        aes_itn?: string | undefined;
        b13a_filing_option?: string | undefined;
        b13a_number?: string | undefined;
        certificate?: string | undefined;
        certify: boolean;
        certify_signer: string;
        commercial_invoice?: boolean | undefined;
        contents_explanation?: string | undefined;
        disclaimer?: string | undefined;
        exporter_identification?: CustomsExporterIdentification$.Outbound | undefined;
        exporter_reference?: string | undefined;
        importer_reference?: string | undefined;
        is_vat_collected?: boolean | undefined;
        invoice?: string | undefined;
        license?: string | undefined;
        metadata?: string | undefined;
        notes?: string | undefined;
        address_importer?: AddressImporter$.Outbound | undefined;
        contents_type: string;
        eel_pfc?: string | undefined;
        incoterm?: string | undefined;
        items: Array<CustomsItemCreateRequest$.Outbound>;
        non_delivery_option: string;
        test?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        CustomsDeclarationCreateRequest
    > = z
        .object({
            aesItn: z.string().optional(),
            b13aFilingOption: CustomsDeclarationB13AFilingOptionEnum$.outboundSchema.optional(),
            b13aNumber: z.string().optional(),
            certificate: z.string().optional(),
            certify: z.boolean(),
            certifySigner: z.string(),
            commercialInvoice: z.boolean().optional(),
            contentsExplanation: z.string().optional(),
            disclaimer: z.string().optional(),
            exporterIdentification: CustomsExporterIdentification$.outboundSchema.optional(),
            exporterReference: z.string().optional(),
            importerReference: z.string().optional(),
            isVatCollected: z.boolean().optional(),
            invoice: z.string().optional(),
            license: z.string().optional(),
            metadata: z.string().optional(),
            notes: z.string().optional(),
            addressImporter: AddressImporter$.outboundSchema.optional(),
            contentsType: CustomsDeclarationContentsTypeEnum$.outboundSchema,
            eelPfc: CustomsDeclarationEelPfcEnum$.outboundSchema.optional(),
            incoterm: CustomsDeclarationIncotermEnum$.outboundSchema.optional(),
            items: z.array(CustomsItemCreateRequest$.outboundSchema),
            nonDeliveryOption: CustomsDeclarationNonDeliveryOptionEnum$.outboundSchema,
            test: z.boolean().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                aesItn: "aes_itn",
                b13aFilingOption: "b13a_filing_option",
                b13aNumber: "b13a_number",
                certifySigner: "certify_signer",
                commercialInvoice: "commercial_invoice",
                contentsExplanation: "contents_explanation",
                exporterIdentification: "exporter_identification",
                exporterReference: "exporter_reference",
                importerReference: "importer_reference",
                isVatCollected: "is_vat_collected",
                addressImporter: "address_importer",
                contentsType: "contents_type",
                eelPfc: "eel_pfc",
                nonDeliveryOption: "non_delivery_option",
            });
        });
}
