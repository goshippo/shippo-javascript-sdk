/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * Indicates the status of the Refund.
 */
export enum RefundStatus {
    Queued = "QUEUED",
    Pending = "PENDING",
    Success = "SUCCESS",
    Error = "ERROR",
}

export type Refund = {
    /**
     * Date and time of object creation.
     */
    objectCreated?: Date | undefined;
    /**
     * Unique identifier of the given object.
     */
    objectId?: string | undefined;
    /**
     * Username of the user who created the object.
     */
    objectOwner?: string | undefined;
    /**
     * Date and time of last object update.
     */
    objectUpdated?: Date | undefined;
    /**
     * Indicates the status of the Refund.
     */
    status?: RefundStatus | undefined;
    /**
     * Indicates whether the object has been created in test mode.
     */
    test?: boolean | undefined;
    /**
     * Object ID of the Transaction to be refunded.
     */
    transaction?: string | undefined;
};

/** @internal */
export namespace RefundStatus$ {
    export const inboundSchema = z.nativeEnum(RefundStatus);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace Refund$ {
    export const inboundSchema: z.ZodType<Refund, z.ZodTypeDef, unknown> = z
        .object({
            object_created: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            object_id: z.string().optional(),
            object_owner: z.string().optional(),
            object_updated: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            status: RefundStatus$.inboundSchema.optional(),
            test: z.boolean().optional(),
            transaction: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.object_created === undefined ? null : { objectCreated: v.object_created }),
                ...(v.object_id === undefined ? null : { objectId: v.object_id }),
                ...(v.object_owner === undefined ? null : { objectOwner: v.object_owner }),
                ...(v.object_updated === undefined ? null : { objectUpdated: v.object_updated }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.test === undefined ? null : { test: v.test }),
                ...(v.transaction === undefined ? null : { transaction: v.transaction }),
            };
        });

    export type Outbound = {
        object_created?: string | undefined;
        object_id?: string | undefined;
        object_owner?: string | undefined;
        object_updated?: string | undefined;
        status?: string | undefined;
        test?: boolean | undefined;
        transaction?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Refund> = z
        .object({
            objectCreated: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            objectId: z.string().optional(),
            objectOwner: z.string().optional(),
            objectUpdated: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            status: RefundStatus$.outboundSchema.optional(),
            test: z.boolean().optional(),
            transaction: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.objectCreated === undefined ? null : { object_created: v.objectCreated }),
                ...(v.objectId === undefined ? null : { object_id: v.objectId }),
                ...(v.objectOwner === undefined ? null : { object_owner: v.objectOwner }),
                ...(v.objectUpdated === undefined ? null : { object_updated: v.objectUpdated }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.test === undefined ? null : { test: v.test }),
                ...(v.transaction === undefined ? null : { transaction: v.transaction }),
            };
        });
}
