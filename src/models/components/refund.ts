/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";

/**
 * Indicates the status of the Refund.
 */
export const RefundStatus = {
  Queued: "QUEUED",
  Pending: "PENDING",
  Success: "SUCCESS",
  Error: "ERROR",
} as const;
/**
 * Indicates the status of the Refund.
 */
export type RefundStatus = ClosedEnum<typeof RefundStatus>;

export type Refund = {
  /**
   * Date and time of object creation.
   */
  objectCreated?: Date | undefined;
  /**
   * Unique identifier of the given object.
   */
  objectId?: string | undefined;
  /**
   * Username of the user who created the object.
   */
  objectOwner?: string | undefined;
  /**
   * Date and time of last object update.
   */
  objectUpdated?: Date | undefined;
  /**
   * Indicates the status of the Refund.
   */
  status?: RefundStatus | undefined;
  /**
   * Indicates whether the object has been created in test mode.
   */
  test?: boolean | undefined;
  /**
   * Object ID of the Transaction to be refunded.
   */
  transaction?: string | undefined;
};

/** @internal */
export const RefundStatus$inboundSchema: z.ZodNativeEnum<typeof RefundStatus> =
  z.nativeEnum(RefundStatus);

/** @internal */
export const RefundStatus$outboundSchema: z.ZodNativeEnum<typeof RefundStatus> =
  RefundStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RefundStatus$ {
  /** @deprecated use `RefundStatus$inboundSchema` instead. */
  export const inboundSchema = RefundStatus$inboundSchema;
  /** @deprecated use `RefundStatus$outboundSchema` instead. */
  export const outboundSchema = RefundStatus$outboundSchema;
}

/** @internal */
export const Refund$inboundSchema: z.ZodType<Refund, z.ZodTypeDef, unknown> = z
  .object({
    object_created: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    object_id: z.string().optional(),
    object_owner: z.string().optional(),
    object_updated: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    status: RefundStatus$inboundSchema.optional(),
    test: z.boolean().optional(),
    transaction: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "object_created": "objectCreated",
      "object_id": "objectId",
      "object_owner": "objectOwner",
      "object_updated": "objectUpdated",
    });
  });

/** @internal */
export type Refund$Outbound = {
  object_created?: string | undefined;
  object_id?: string | undefined;
  object_owner?: string | undefined;
  object_updated?: string | undefined;
  status?: string | undefined;
  test?: boolean | undefined;
  transaction?: string | undefined;
};

/** @internal */
export const Refund$outboundSchema: z.ZodType<
  Refund$Outbound,
  z.ZodTypeDef,
  Refund
> = z.object({
  objectCreated: z.date().transform(v => v.toISOString()).optional(),
  objectId: z.string().optional(),
  objectOwner: z.string().optional(),
  objectUpdated: z.date().transform(v => v.toISOString()).optional(),
  status: RefundStatus$outboundSchema.optional(),
  test: z.boolean().optional(),
  transaction: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    objectCreated: "object_created",
    objectId: "object_id",
    objectOwner: "object_owner",
    objectUpdated: "object_updated",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Refund$ {
  /** @deprecated use `Refund$inboundSchema` instead. */
  export const inboundSchema = Refund$inboundSchema;
  /** @deprecated use `Refund$outboundSchema` instead. */
  export const outboundSchema = Refund$outboundSchema;
  /** @deprecated use `Refund$Outbound` instead. */
  export type Outbound = Refund$Outbound;
}
