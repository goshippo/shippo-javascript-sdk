/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

/**
 * Indicates the status of the Refund.
 */
export const RefundStatus = {
    Queued: "QUEUED",
    Pending: "PENDING",
    Success: "SUCCESS",
    Error: "ERROR",
} as const;
/**
 * Indicates the status of the Refund.
 */
export type RefundStatus = ClosedEnum<typeof RefundStatus>;

export type Refund = {
    /**
     * Date and time of object creation.
     */
    objectCreated?: Date | undefined;
    /**
     * Unique identifier of the given object.
     */
    objectId?: string | undefined;
    /**
     * Username of the user who created the object.
     */
    objectOwner?: string | undefined;
    /**
     * Date and time of last object update.
     */
    objectUpdated?: Date | undefined;
    /**
     * Indicates the status of the Refund.
     */
    status?: RefundStatus | undefined;
    /**
     * Indicates whether the object has been created in test mode.
     */
    test?: boolean | undefined;
    /**
     * Object ID of the Transaction to be refunded.
     */
    transaction?: string | undefined;
};

/** @internal */
export namespace RefundStatus$ {
    export const inboundSchema: z.ZodNativeEnum<typeof RefundStatus> = z.nativeEnum(RefundStatus);
    export const outboundSchema: z.ZodNativeEnum<typeof RefundStatus> = inboundSchema;
}

/** @internal */
export namespace Refund$ {
    export const inboundSchema: z.ZodType<Refund, z.ZodTypeDef, unknown> = z
        .object({
            object_created: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            object_id: z.string().optional(),
            object_owner: z.string().optional(),
            object_updated: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            status: RefundStatus$.inboundSchema.optional(),
            test: z.boolean().optional(),
            transaction: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                object_created: "objectCreated",
                object_id: "objectId",
                object_owner: "objectOwner",
                object_updated: "objectUpdated",
            });
        });

    export type Outbound = {
        object_created?: string | undefined;
        object_id?: string | undefined;
        object_owner?: string | undefined;
        object_updated?: string | undefined;
        status?: string | undefined;
        test?: boolean | undefined;
        transaction?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Refund> = z
        .object({
            objectCreated: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            objectId: z.string().optional(),
            objectOwner: z.string().optional(),
            objectUpdated: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            status: RefundStatus$.outboundSchema.optional(),
            test: z.boolean().optional(),
            transaction: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                objectCreated: "object_created",
                objectId: "object_id",
                objectOwner: "object_owner",
                objectUpdated: "object_updated",
            });
        });
}
