/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

export type Webhook = {
    /**
     * Type of event that triggers the webhook.
     */
    event: string;
    /**
     * URL webhook events are sent to.
     */
    url: string;
    /**
     * Determines whether the webhook is active or not.
     */
    active?: boolean | undefined;
    /**
     * Determines whether the webhook is a test webhook or not.
     */
    isTest?: boolean | undefined;
    /**
     * Timestamp of the creation of the webhook.
     */
    objectCreated?: Date | undefined;
    /**
     * Unique identifier of the webhook. This can be used to retrieve or delete the webhook.
     */
    objectId?: string | undefined;
    /**
     * Timestamp of the last update of the webhook.
     */
    objectUpdated?: Date | undefined;
    /**
     * Username of the user who created the webhook.
     */
    objectOwner?: string | undefined;
};

/** @internal */
export namespace Webhook$ {
    export const inboundSchema: z.ZodType<Webhook, z.ZodTypeDef, unknown> = z
        .object({
            event: z.string(),
            url: z.string(),
            active: z.boolean().optional(),
            is_test: z.boolean().optional(),
            object_created: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            object_id: z.string().optional(),
            object_updated: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            object_owner: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                is_test: "isTest",
                object_created: "objectCreated",
                object_id: "objectId",
                object_updated: "objectUpdated",
                object_owner: "objectOwner",
            });
        });

    export type Outbound = {
        event: string;
        url: string;
        active?: boolean | undefined;
        is_test?: boolean | undefined;
        object_created?: string | undefined;
        object_id?: string | undefined;
        object_updated?: string | undefined;
        object_owner?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Webhook> = z
        .object({
            event: z.string(),
            url: z.string(),
            active: z.boolean().optional(),
            isTest: z.boolean().optional(),
            objectCreated: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            objectId: z.string().optional(),
            objectUpdated: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            objectOwner: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                isTest: "is_test",
                objectCreated: "object_created",
                objectId: "object_id",
                objectUpdated: "object_updated",
                objectOwner: "object_owner",
            });
        });
}
