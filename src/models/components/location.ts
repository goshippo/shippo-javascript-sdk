/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import {
    AddressCompleteCreateRequest,
    AddressCompleteCreateRequest$,
} from "./addresscompletecreaterequest.js";
import * as z from "zod";

/**
 * Where your parcels will be available for pickup. "Security Deck" and "Shipping Dock" are only
 *
 * @remarks
 * supported for DHL Express.
 */
export const BuildingLocationType = {
    BackDoor: "Back Door",
    RingBell: "Ring Bell",
    SecurityDeck: "Security Deck",
    ShippingDock: "Shipping Dock",
    FrontDoor: "Front Door",
    KnockOnDoor: "Knock on Door",
    InAtMailbox: "In/At Mailbox",
    MailRoom: "Mail Room",
    Office: "Office",
    Other: "Other",
    Reception: "Reception",
    SideDoor: "Side Door",
} as const;
/**
 * Where your parcels will be available for pickup. "Security Deck" and "Shipping Dock" are only
 *
 * @remarks
 * supported for DHL Express.
 */
export type BuildingLocationType = ClosedEnum<typeof BuildingLocationType>;

/**
 * The type of building where the pickup is located.
 */
export const BuildingType = {
    Apartment: "apartment",
    Building: "building",
    Department: "department",
    Floor: "floor",
    Room: "room",
    Suite: "suite",
} as const;
/**
 * The type of building where the pickup is located.
 */
export type BuildingType = ClosedEnum<typeof BuildingType>;

/**
 * Location where the parcel(s) will be picked up.
 */
export type Location = {
    /**
     * The pickup address, which includes your name, company name, street address, city, state, zip code,
     *
     * @remarks
     * country, phone number, and email address (strings). Special characters should not be included in
     * any address element, especially name, company, and email.
     */
    address: AddressCompleteCreateRequest;
    /**
     * Where your parcels will be available for pickup. "Security Deck" and "Shipping Dock" are only
     *
     * @remarks
     * supported for DHL Express.
     */
    buildingLocationType: BuildingLocationType;
    /**
     * The type of building where the pickup is located.
     */
    buildingType?: BuildingType | undefined;
    /**
     * Pickup instructions for the courier. This is a mandatory field if the building_location_type is "Other".
     */
    instructions?: string | undefined;
};

/** @internal */
export namespace BuildingLocationType$ {
    export const inboundSchema: z.ZodNativeEnum<typeof BuildingLocationType> =
        z.nativeEnum(BuildingLocationType);
    export const outboundSchema: z.ZodNativeEnum<typeof BuildingLocationType> = inboundSchema;
}

/** @internal */
export namespace BuildingType$ {
    export const inboundSchema: z.ZodNativeEnum<typeof BuildingType> = z.nativeEnum(BuildingType);
    export const outboundSchema: z.ZodNativeEnum<typeof BuildingType> = inboundSchema;
}

/** @internal */
export namespace Location$ {
    export const inboundSchema: z.ZodType<Location, z.ZodTypeDef, unknown> = z
        .object({
            address: AddressCompleteCreateRequest$.inboundSchema,
            building_location_type: BuildingLocationType$.inboundSchema,
            building_type: BuildingType$.inboundSchema.optional(),
            instructions: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                building_location_type: "buildingLocationType",
                building_type: "buildingType",
            });
        });

    export type Outbound = {
        address: AddressCompleteCreateRequest$.Outbound;
        building_location_type: string;
        building_type?: string | undefined;
        instructions?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Location> = z
        .object({
            address: AddressCompleteCreateRequest$.outboundSchema,
            buildingLocationType: BuildingLocationType$.outboundSchema,
            buildingType: BuildingType$.outboundSchema.optional(),
            instructions: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                buildingLocationType: "building_location_type",
                buildingType: "building_type",
            });
        });
}
