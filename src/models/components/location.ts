/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
    AddressCompleteCreateRequest,
    AddressCompleteCreateRequest$,
} from "./addresscompletecreaterequest";
import * as z from "zod";

/**
 * Where your parcels will be available for pickup. "Security Deck" and "Shipping Dock" are only
 *
 * @remarks
 * supported for DHL Express.
 */
export enum BuildingLocationType {
    BackDoor = "Back Door",
    RingBell = "Ring Bell",
    SecurityDeck = "Security Deck",
    ShippingDock = "Shipping Dock",
    FrontDoor = "Front Door",
    KnockOnDoor = "Knock on Door",
    InAtMailbox = "In/At Mailbox",
    MailRoom = "Mail Room",
    Office = "Office",
    Other = "Other",
    Reception = "Reception",
    SideDoor = "Side Door",
}

/**
 * The type of building where the pickup is located.
 */
export enum BuildingType {
    Apartment = "apartment",
    Building = "building",
    Department = "department",
    Floor = "floor",
    Room = "room",
    Suite = "suite",
}

/**
 * Location where the parcel(s) will be picked up.
 */
export type Location = {
    /**
     * The pickup address, which includes your name, company name, street address, city, state, zip code,
     *
     * @remarks
     * country, phone number, and email address (strings). Special characters should not be included in
     * any address element, especially name, company, and email.
     */
    address: AddressCompleteCreateRequest;
    /**
     * Where your parcels will be available for pickup. "Security Deck" and "Shipping Dock" are only
     *
     * @remarks
     * supported for DHL Express.
     */
    buildingLocationType: BuildingLocationType;
    /**
     * The type of building where the pickup is located.
     */
    buildingType?: BuildingType | undefined;
    /**
     * Pickup instructions for the courier. This is a mandatory field if the building_location_type is "Other".
     */
    instructions?: string | undefined;
};

/** @internal */
export const BuildingLocationType$ = z.nativeEnum(BuildingLocationType);

/** @internal */
export const BuildingType$ = z.nativeEnum(BuildingType);

/** @internal */
export namespace Location$ {
    export type Inbound = {
        address: AddressCompleteCreateRequest$.Inbound;
        building_location_type: BuildingLocationType;
        building_type?: BuildingType | undefined;
        instructions?: string | undefined;
    };

    export const inboundSchema: z.ZodType<Location, z.ZodTypeDef, Inbound> = z
        .object({
            address: AddressCompleteCreateRequest$.inboundSchema,
            building_location_type: BuildingLocationType$,
            building_type: BuildingType$.optional(),
            instructions: z.string().optional(),
        })
        .transform((v) => {
            return {
                address: v.address,
                buildingLocationType: v.building_location_type,
                ...(v.building_type === undefined ? null : { buildingType: v.building_type }),
                ...(v.instructions === undefined ? null : { instructions: v.instructions }),
            };
        });

    export type Outbound = {
        address: AddressCompleteCreateRequest$.Outbound;
        building_location_type: BuildingLocationType;
        building_type?: BuildingType | undefined;
        instructions?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Location> = z
        .object({
            address: AddressCompleteCreateRequest$.outboundSchema,
            buildingLocationType: BuildingLocationType$,
            buildingType: BuildingType$.optional(),
            instructions: z.string().optional(),
        })
        .transform((v) => {
            return {
                address: v.address,
                building_location_type: v.buildingLocationType,
                ...(v.buildingType === undefined ? null : { building_type: v.buildingType }),
                ...(v.instructions === undefined ? null : { instructions: v.instructions }),
            };
        });
}
