/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import {
  AddressCompleteCreateRequest,
  AddressCompleteCreateRequest$inboundSchema,
  AddressCompleteCreateRequest$Outbound,
  AddressCompleteCreateRequest$outboundSchema,
} from "./addresscompletecreaterequest.js";

/**
 * Where your parcels will be available for pickup. "Security Deck" and "Shipping Dock" are only
 *
 * @remarks
 * supported for DHL Express.
 */
export const BuildingLocationType = {
  BackDoor: "Back Door",
  RingBell: "Ring Bell",
  SecurityDeck: "Security Deck",
  ShippingDock: "Shipping Dock",
  FrontDoor: "Front Door",
  KnockOnDoor: "Knock on Door",
  InAtMailbox: "In/At Mailbox",
  MailRoom: "Mail Room",
  Office: "Office",
  Other: "Other",
  Reception: "Reception",
  SideDoor: "Side Door",
} as const;
/**
 * Where your parcels will be available for pickup. "Security Deck" and "Shipping Dock" are only
 *
 * @remarks
 * supported for DHL Express.
 */
export type BuildingLocationType = ClosedEnum<typeof BuildingLocationType>;

/**
 * The type of building where the pickup is located.
 */
export const BuildingType = {
  Apartment: "apartment",
  Building: "building",
  Department: "department",
  Floor: "floor",
  Room: "room",
  Suite: "suite",
} as const;
/**
 * The type of building where the pickup is located.
 */
export type BuildingType = ClosedEnum<typeof BuildingType>;

/**
 * Location where the parcel(s) will be picked up.
 */
export type Location = {
  /**
   * The pickup address, which includes your name, company name, street address, city, state, zip code,
   *
   * @remarks
   * country, phone number, and email address (strings). Special characters should not be included in
   * any address element, especially name, company, and email.
   */
  address: AddressCompleteCreateRequest;
  /**
   * Where your parcels will be available for pickup. "Security Deck" and "Shipping Dock" are only
   *
   * @remarks
   * supported for DHL Express.
   */
  buildingLocationType: BuildingLocationType;
  /**
   * The type of building where the pickup is located.
   */
  buildingType?: BuildingType | undefined;
  /**
   * Pickup instructions for the courier. This is a mandatory field if the building_location_type is "Other".
   */
  instructions?: string | undefined;
};

/** @internal */
export const BuildingLocationType$inboundSchema: z.ZodNativeEnum<
  typeof BuildingLocationType
> = z.nativeEnum(BuildingLocationType);

/** @internal */
export const BuildingLocationType$outboundSchema: z.ZodNativeEnum<
  typeof BuildingLocationType
> = BuildingLocationType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BuildingLocationType$ {
  /** @deprecated use `BuildingLocationType$inboundSchema` instead. */
  export const inboundSchema = BuildingLocationType$inboundSchema;
  /** @deprecated use `BuildingLocationType$outboundSchema` instead. */
  export const outboundSchema = BuildingLocationType$outboundSchema;
}

/** @internal */
export const BuildingType$inboundSchema: z.ZodNativeEnum<typeof BuildingType> =
  z.nativeEnum(BuildingType);

/** @internal */
export const BuildingType$outboundSchema: z.ZodNativeEnum<typeof BuildingType> =
  BuildingType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BuildingType$ {
  /** @deprecated use `BuildingType$inboundSchema` instead. */
  export const inboundSchema = BuildingType$inboundSchema;
  /** @deprecated use `BuildingType$outboundSchema` instead. */
  export const outboundSchema = BuildingType$outboundSchema;
}

/** @internal */
export const Location$inboundSchema: z.ZodType<
  Location,
  z.ZodTypeDef,
  unknown
> = z.object({
  address: AddressCompleteCreateRequest$inboundSchema,
  building_location_type: BuildingLocationType$inboundSchema,
  building_type: BuildingType$inboundSchema.optional(),
  instructions: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "building_location_type": "buildingLocationType",
    "building_type": "buildingType",
  });
});

/** @internal */
export type Location$Outbound = {
  address: AddressCompleteCreateRequest$Outbound;
  building_location_type: string;
  building_type?: string | undefined;
  instructions?: string | undefined;
};

/** @internal */
export const Location$outboundSchema: z.ZodType<
  Location$Outbound,
  z.ZodTypeDef,
  Location
> = z.object({
  address: AddressCompleteCreateRequest$outboundSchema,
  buildingLocationType: BuildingLocationType$outboundSchema,
  buildingType: BuildingType$outboundSchema.optional(),
  instructions: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    buildingLocationType: "building_location_type",
    buildingType: "building_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Location$ {
  /** @deprecated use `Location$inboundSchema` instead. */
  export const inboundSchema = Location$inboundSchema;
  /** @deprecated use `Location$outboundSchema` instead. */
  export const outboundSchema = Location$outboundSchema;
  /** @deprecated use `Location$Outbound` instead. */
  export type Outbound = Location$Outbound;
}
