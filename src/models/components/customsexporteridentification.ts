/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { CustomsTaxIdentification, CustomsTaxIdentification$ } from "./customstaxidentification.js";
import * as z from "zod";

/**
 * Additional exporter identification that may be required to ship in certain countries
 */
export type CustomsExporterIdentification = {
    /**
     * Economic Operators' Registration and Identification (EORI) number. Must start with a 2 character
     *
     * @remarks
     * country code followed by a 6-17 character alphanumeric identifier (e.g. PL1234567890ABCDE).
     * <a href="https://ec.europa.eu/taxation_customs/business/customs-procedures/general-overview/economic-operators-registration-identification-number-eori_en">More information on EORI.</a>
     */
    eoriNumber?: string | undefined;
    /**
     * Tax identification that may be required to ship in certain countries. Typically used to assess duties on
     *
     * @remarks
     * goods that are crossing a border.
     */
    taxId?: CustomsTaxIdentification | undefined;
};

/** @internal */
export namespace CustomsExporterIdentification$ {
    export const inboundSchema: z.ZodType<CustomsExporterIdentification, z.ZodTypeDef, unknown> = z
        .object({
            eori_number: z.string().optional(),
            tax_id: CustomsTaxIdentification$.inboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                eori_number: "eoriNumber",
                tax_id: "taxId",
            });
        });

    export type Outbound = {
        eori_number?: string | undefined;
        tax_id?: CustomsTaxIdentification$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CustomsExporterIdentification> =
        z
            .object({
                eoriNumber: z.string().optional(),
                taxId: CustomsTaxIdentification$.outboundSchema.optional(),
            })
            .transform((v) => {
                return remap$(v, {
                    eoriNumber: "eori_number",
                    taxId: "tax_id",
                });
            });
}
