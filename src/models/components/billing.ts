/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

/**
 * Party to be billed. (Leave blank for DHL Germany.)
 */
export const Type = {
    Sender: "SENDER",
    Recipient: "RECIPIENT",
    ThirdParty: "THIRD_PARTY",
    ThirdPartyConsignee: "THIRD_PARTY_CONSIGNEE",
    Collect: "COLLECT",
} as const;
/**
 * Party to be billed. (Leave blank for DHL Germany.)
 */
export type Type = ClosedEnum<typeof Type>;

/**
 * Specify billing details (UPS, FedEx, and DHL Germany only).
 */
export type Billing = {
    /**
     * Account number to be billed. (For DHL Germany, leave this field blank.)
     */
    account?: string | undefined;
    /**
     * Country iso2 code of account number to be billed (required for UPS third party billing only).
     */
    country?: string | undefined;
    /**
     * 2 digit code used to override your default participation code associated with your DHL Germany account.
     */
    participationCode?: string | undefined;
    /**
     * Party to be billed. (Leave blank for DHL Germany.)
     */
    type?: Type | undefined;
    /**
     * ZIP code of account number to be billed (required for UPS if there is a zip on the billing account).
     */
    zip?: string | undefined;
};

/** @internal */
export namespace Type$ {
    export const inboundSchema: z.ZodNativeEnum<typeof Type> = z.nativeEnum(Type);
    export const outboundSchema: z.ZodNativeEnum<typeof Type> = inboundSchema;
}

/** @internal */
export namespace Billing$ {
    export const inboundSchema: z.ZodType<Billing, z.ZodTypeDef, unknown> = z
        .object({
            account: z.string().optional(),
            country: z.string().optional(),
            participation_code: z.string().optional(),
            type: Type$.inboundSchema.optional(),
            zip: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                participation_code: "participationCode",
            });
        });

    export type Outbound = {
        account?: string | undefined;
        country?: string | undefined;
        participation_code?: string | undefined;
        type?: string | undefined;
        zip?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Billing> = z
        .object({
            account: z.string().optional(),
            country: z.string().optional(),
            participationCode: z.string().optional(),
            type: Type$.outboundSchema.optional(),
            zip: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                participationCode: "participation_code",
            });
        });
}
