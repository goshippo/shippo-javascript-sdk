/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { WebhookEventTypeEnum, WebhookEventTypeEnum$ } from "./webhookeventtypeenum.js";
import * as z from "zod";

export type WebhookUpdateRequest = {
    /**
     * Type of event that triggered the webhook.
     */
    event: WebhookEventTypeEnum;
    /**
     * URL webhook events are sent to.
     */
    url: string;
    /**
     * Determines whether the webhook is active or not.
     */
    active?: boolean | undefined;
    /**
     * Determines whether the webhook is a test webhook or not.
     */
    isTest?: boolean | undefined;
};

/** @internal */
export namespace WebhookUpdateRequest$ {
    export const inboundSchema: z.ZodType<WebhookUpdateRequest, z.ZodTypeDef, unknown> = z
        .object({
            event: WebhookEventTypeEnum$.inboundSchema,
            url: z.string(),
            active: z.boolean().optional(),
            is_test: z.boolean().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                is_test: "isTest",
            });
        });

    export type Outbound = {
        event: string;
        url: string;
        active?: boolean | undefined;
        is_test?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, WebhookUpdateRequest> = z
        .object({
            event: WebhookEventTypeEnum$.outboundSchema,
            url: z.string(),
            active: z.boolean().optional(),
            isTest: z.boolean().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                isTest: "is_test",
            });
        });
}
