/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import {
  WebhookEventTypeEnum,
  WebhookEventTypeEnum$inboundSchema,
  WebhookEventTypeEnum$outboundSchema,
} from "./webhookeventtypeenum.js";

export type WebhookUpdateRequest = {
  /**
   * Type of event that triggered the webhook.
   */
  event: WebhookEventTypeEnum;
  /**
   * URL webhook events are sent to.
   */
  url: string;
  /**
   * Determines whether the webhook is active or not.
   */
  active?: boolean | undefined;
  /**
   * Determines whether the webhook is a test webhook or not.
   */
  isTest?: boolean | undefined;
};

/** @internal */
export const WebhookUpdateRequest$inboundSchema: z.ZodType<
  WebhookUpdateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  event: WebhookEventTypeEnum$inboundSchema,
  url: z.string(),
  active: z.boolean().optional(),
  is_test: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "is_test": "isTest",
  });
});

/** @internal */
export type WebhookUpdateRequest$Outbound = {
  event: string;
  url: string;
  active?: boolean | undefined;
  is_test?: boolean | undefined;
};

/** @internal */
export const WebhookUpdateRequest$outboundSchema: z.ZodType<
  WebhookUpdateRequest$Outbound,
  z.ZodTypeDef,
  WebhookUpdateRequest
> = z.object({
  event: WebhookEventTypeEnum$outboundSchema,
  url: z.string(),
  active: z.boolean().optional(),
  isTest: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    isTest: "is_test",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WebhookUpdateRequest$ {
  /** @deprecated use `WebhookUpdateRequest$inboundSchema` instead. */
  export const inboundSchema = WebhookUpdateRequest$inboundSchema;
  /** @deprecated use `WebhookUpdateRequest$outboundSchema` instead. */
  export const outboundSchema = WebhookUpdateRequest$outboundSchema;
  /** @deprecated use `WebhookUpdateRequest$Outbound` instead. */
  export type Outbound = WebhookUpdateRequest$Outbound;
}
