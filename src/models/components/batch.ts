/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import {
    BatchShipmentPaginatedList,
    BatchShipmentPaginatedList$,
} from "./batchshipmentpaginatedlist.js";
import { LabelFileTypeEnum, LabelFileTypeEnum$ } from "./labelfiletypeenum.js";
import * as z from "zod";

/**
 * An object containing the following counts:<br>`creation_succeeded`<br>`creation_failed`<br>`purchase_succeeded`<br>`purchase_failed`
 */
export type ObjectResults = {
    creationFailed: number;
    creationSucceeded: number;
    purchaseFailed: number;
    purchaseSucceeded: number;
};

/**
 * Batches that are `VALIDATING` are being created and validated<br>
 *
 * @remarks
 * `VALID` batches can be purchased<br>
 * `INVALID` batches cannot be purchased, `INVALID` BatchShipments must be removed<br>
 * Batches that are in the `PURCHASING` state are being purchased<br>
 * `PURCHASED` batches are finished purchasing.
 */
export const BatchStatus = {
    Validating: "VALIDATING",
    Valid: "VALID",
    Invalid: "INVALID",
    Purchasing: "PURCHASING",
    Purchased: "PURCHASED",
} as const;
/**
 * Batches that are `VALIDATING` are being created and validated<br>
 *
 * @remarks
 * `VALID` batches can be purchased<br>
 * `INVALID` batches cannot be purchased, `INVALID` BatchShipments must be removed<br>
 * Batches that are in the `PURCHASING` state are being purchased<br>
 * `PURCHASED` batches are finished purchasing.
 */
export type BatchStatus = ClosedEnum<typeof BatchStatus>;

export type Batch = {
    /**
     * ID of the Carrier Account object to use as the default for all shipments in this Batch.
     *
     * @remarks
     * The carrier account can be changed on a per-shipment basis by changing the carrier_account in the
     * corresponding BatchShipment object.
     */
    defaultCarrierAccount: string;
    /**
     * Token of the service level to use as the default for all shipments in this Batch.
     *
     * @remarks
     * The servicelevel can be changed on a per-shipment basis by changing the servicelevel_token in the
     * corresponding BatchShipment object. <a href="#tag/Service-Levels">Servicelevel tokens can be found here.</a>
     */
    defaultServicelevelToken: string;
    /**
     * Print format of the <a href="https://docs.goshippo.com/docs/shipments/shippinglabelsizes/">label</a>. If empty, will use the default format set from
     *
     * @remarks
     * <a href="https://apps.goshippo.com/settings/labels">the Shippo dashboard.</a>
     */
    labelFiletype?: LabelFileTypeEnum | undefined;
    /**
     * A string of up to 100 characters that can be filled with any additional information you want to attach to the object.
     */
    metadata?: string | undefined;
    batchShipments: BatchShipmentPaginatedList;
    /**
     * An array of URLs each pointing to a merged file of 100 labels each
     */
    labelUrl: Array<string>;
    /**
     * Date and time of Batch creation
     */
    objectCreated: string;
    /**
     * Unique identifier of the given Batch object
     */
    objectId: string;
    /**
     * Username of the user who created the Address object.
     */
    objectOwner: string;
    /**
     * An object containing the following counts:<br>`creation_succeeded`<br>`creation_failed`<br>`purchase_succeeded`<br>`purchase_failed`
     */
    objectResults: ObjectResults;
    /**
     * Date and time of last update to the Batch
     */
    objectUpdated: string;
    /**
     * Batches that are `VALIDATING` are being created and validated<br>
     *
     * @remarks
     * `VALID` batches can be purchased<br>
     * `INVALID` batches cannot be purchased, `INVALID` BatchShipments must be removed<br>
     * Batches that are in the `PURCHASING` state are being purchased<br>
     * `PURCHASED` batches are finished purchasing.
     */
    status: BatchStatus;
    test?: boolean | undefined;
};

/** @internal */
export namespace ObjectResults$ {
    export const inboundSchema: z.ZodType<ObjectResults, z.ZodTypeDef, unknown> = z
        .object({
            creation_failed: z.number().int(),
            creation_succeeded: z.number().int(),
            purchase_failed: z.number().int(),
            purchase_succeeded: z.number().int(),
        })
        .transform((v) => {
            return remap$(v, {
                creation_failed: "creationFailed",
                creation_succeeded: "creationSucceeded",
                purchase_failed: "purchaseFailed",
                purchase_succeeded: "purchaseSucceeded",
            });
        });

    export type Outbound = {
        creation_failed: number;
        creation_succeeded: number;
        purchase_failed: number;
        purchase_succeeded: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ObjectResults> = z
        .object({
            creationFailed: z.number().int(),
            creationSucceeded: z.number().int(),
            purchaseFailed: z.number().int(),
            purchaseSucceeded: z.number().int(),
        })
        .transform((v) => {
            return remap$(v, {
                creationFailed: "creation_failed",
                creationSucceeded: "creation_succeeded",
                purchaseFailed: "purchase_failed",
                purchaseSucceeded: "purchase_succeeded",
            });
        });
}

/** @internal */
export namespace BatchStatus$ {
    export const inboundSchema: z.ZodNativeEnum<typeof BatchStatus> = z.nativeEnum(BatchStatus);
    export const outboundSchema: z.ZodNativeEnum<typeof BatchStatus> = inboundSchema;
}

/** @internal */
export namespace Batch$ {
    export const inboundSchema: z.ZodType<Batch, z.ZodTypeDef, unknown> = z
        .object({
            default_carrier_account: z.string(),
            default_servicelevel_token: z.string(),
            label_filetype: LabelFileTypeEnum$.inboundSchema.optional(),
            metadata: z.string().optional(),
            batch_shipments: BatchShipmentPaginatedList$.inboundSchema,
            label_url: z.array(z.string()),
            object_created: z.string(),
            object_id: z.string(),
            object_owner: z.string(),
            object_results: z.lazy(() => ObjectResults$.inboundSchema),
            object_updated: z.string(),
            status: BatchStatus$.inboundSchema,
            test: z.boolean().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                default_carrier_account: "defaultCarrierAccount",
                default_servicelevel_token: "defaultServicelevelToken",
                label_filetype: "labelFiletype",
                batch_shipments: "batchShipments",
                label_url: "labelUrl",
                object_created: "objectCreated",
                object_id: "objectId",
                object_owner: "objectOwner",
                object_results: "objectResults",
                object_updated: "objectUpdated",
            });
        });

    export type Outbound = {
        default_carrier_account: string;
        default_servicelevel_token: string;
        label_filetype?: string | undefined;
        metadata?: string | undefined;
        batch_shipments: BatchShipmentPaginatedList$.Outbound;
        label_url: Array<string>;
        object_created: string;
        object_id: string;
        object_owner: string;
        object_results: ObjectResults$.Outbound;
        object_updated: string;
        status: string;
        test?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Batch> = z
        .object({
            defaultCarrierAccount: z.string(),
            defaultServicelevelToken: z.string(),
            labelFiletype: LabelFileTypeEnum$.outboundSchema.optional(),
            metadata: z.string().optional(),
            batchShipments: BatchShipmentPaginatedList$.outboundSchema,
            labelUrl: z.array(z.string()),
            objectCreated: z.string(),
            objectId: z.string(),
            objectOwner: z.string(),
            objectResults: z.lazy(() => ObjectResults$.outboundSchema),
            objectUpdated: z.string(),
            status: BatchStatus$.outboundSchema,
            test: z.boolean().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                defaultCarrierAccount: "default_carrier_account",
                defaultServicelevelToken: "default_servicelevel_token",
                labelFiletype: "label_filetype",
                batchShipments: "batch_shipments",
                labelUrl: "label_url",
                objectCreated: "object_created",
                objectId: "object_id",
                objectOwner: "object_owner",
                objectResults: "object_results",
                objectUpdated: "object_updated",
            });
        });
}
