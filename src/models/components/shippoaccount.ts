/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

export type ShippoAccount = {
    email: string;
    firstName: string;
    lastName: string;
    companyName?: string | undefined;
    objectCreated?: Date | undefined;
    objectId?: string | undefined;
    objectUpdated?: Date | undefined;
};

/** @internal */
export namespace ShippoAccount$ {
    export const inboundSchema: z.ZodType<ShippoAccount, z.ZodTypeDef, unknown> = z
        .object({
            email: z.string(),
            first_name: z.string(),
            last_name: z.string(),
            company_name: z.string().optional(),
            object_created: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            object_id: z.string().optional(),
            object_updated: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
        })
        .transform((v) => {
            return remap$(v, {
                first_name: "firstName",
                last_name: "lastName",
                company_name: "companyName",
                object_created: "objectCreated",
                object_id: "objectId",
                object_updated: "objectUpdated",
            });
        });

    export type Outbound = {
        email: string;
        first_name: string;
        last_name: string;
        company_name?: string | undefined;
        object_created?: string | undefined;
        object_id?: string | undefined;
        object_updated?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ShippoAccount> = z
        .object({
            email: z.string(),
            firstName: z.string(),
            lastName: z.string(),
            companyName: z.string().optional(),
            objectCreated: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            objectId: z.string().optional(),
            objectUpdated: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
        })
        .transform((v) => {
            return remap$(v, {
                firstName: "first_name",
                lastName: "last_name",
                companyName: "company_name",
                objectCreated: "object_created",
                objectId: "object_id",
                objectUpdated: "object_updated",
            });
        });
}
