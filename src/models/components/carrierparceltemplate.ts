/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import {
  DistanceUnitEnum,
  DistanceUnitEnum$inboundSchema,
  DistanceUnitEnum$outboundSchema,
} from "./distanceunitenum.js";

export type CarrierParcelTemplate = {
  /**
   * The name of the carrier that provides this parcel template
   */
  carrier?: string | undefined;
  /**
   * The measure unit used for length, width and height.
   */
  distanceUnit?: DistanceUnitEnum | undefined;
  /**
   * The height of the package, in units specified by the distance_unit attribute
   */
  height?: string | undefined;
  /**
   * True if the carrier parcel template allows custom dimensions, such as USPS Softpack.
   */
  isVariableDimensions?: boolean | undefined;
  /**
   * The length of the package, in units specified by the distance_unit attribute
   */
  length?: string | undefined;
  /**
   * The name of the carrier parcel template
   */
  name?: string | undefined;
  /**
   * The unique string representation of the carrier parcel template
   */
  token?: string | undefined;
  /**
   * The width of the package, in units specified by the distance_unit attribute
   */
  width?: string | undefined;
};

/** @internal */
export const CarrierParcelTemplate$inboundSchema: z.ZodType<
  CarrierParcelTemplate,
  z.ZodTypeDef,
  unknown
> = z.object({
  carrier: z.string().optional(),
  distance_unit: DistanceUnitEnum$inboundSchema.optional(),
  height: z.string().optional(),
  is_variable_dimensions: z.boolean().optional(),
  length: z.string().optional(),
  name: z.string().optional(),
  token: z.string().optional(),
  width: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "distance_unit": "distanceUnit",
    "is_variable_dimensions": "isVariableDimensions",
  });
});

/** @internal */
export type CarrierParcelTemplate$Outbound = {
  carrier?: string | undefined;
  distance_unit?: string | undefined;
  height?: string | undefined;
  is_variable_dimensions?: boolean | undefined;
  length?: string | undefined;
  name?: string | undefined;
  token?: string | undefined;
  width?: string | undefined;
};

/** @internal */
export const CarrierParcelTemplate$outboundSchema: z.ZodType<
  CarrierParcelTemplate$Outbound,
  z.ZodTypeDef,
  CarrierParcelTemplate
> = z.object({
  carrier: z.string().optional(),
  distanceUnit: DistanceUnitEnum$outboundSchema.optional(),
  height: z.string().optional(),
  isVariableDimensions: z.boolean().optional(),
  length: z.string().optional(),
  name: z.string().optional(),
  token: z.string().optional(),
  width: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    distanceUnit: "distance_unit",
    isVariableDimensions: "is_variable_dimensions",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CarrierParcelTemplate$ {
  /** @deprecated use `CarrierParcelTemplate$inboundSchema` instead. */
  export const inboundSchema = CarrierParcelTemplate$inboundSchema;
  /** @deprecated use `CarrierParcelTemplate$outboundSchema` instead. */
  export const outboundSchema = CarrierParcelTemplate$outboundSchema;
  /** @deprecated use `CarrierParcelTemplate$Outbound` instead. */
  export type Outbound = CarrierParcelTemplate$Outbound;
}
