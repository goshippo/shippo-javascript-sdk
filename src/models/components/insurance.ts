/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";

/**
 * To have insurance cover provided by a carrier directly instead of Shippo's provider (XCover), set `provider` to `FEDEX`, `UPS`, or `ONTRAC`.
 */
export const Provider = {
  Fedex: "FEDEX",
  Ups: "UPS",
  Ontrac: "ONTRAC",
} as const;
/**
 * To have insurance cover provided by a carrier directly instead of Shippo's provider (XCover), set `provider` to `FEDEX`, `UPS`, or `ONTRAC`.
 */
export type Provider = ClosedEnum<typeof Provider>;

/**
 * To add 3rd party insurance powered by <a href="https://docs.goshippo.com/docs/shipments/shippinginsurance/">XCover</a>,
 *
 * @remarks
 * specify <br> `amount`, `content`, and `currency`. <br> Alternatively, you can choose carrier provided insurance
 * by additionally specifying `provider` (UPS, FedEx and OnTrac only). <br><br> If you do not want to add insurance
 * to your shipment, do not set these parameters.
 */
export type Insurance = {
  /**
   * Declared value of the goods you want to insure.
   */
  amount?: string | undefined;
  /**
   * Description of package content.
   */
  content?: string | undefined;
  /**
   * Currency for the amount value.
   *
   * @remarks
   * Currently only USD is supported for FedEx and UPS.
   */
  currency?: string | undefined;
  /**
   * To have insurance cover provided by a carrier directly instead of Shippo's provider (XCover), set `provider` to `FEDEX`, `UPS`, or `ONTRAC`.
   */
  provider?: Provider | undefined;
};

/** @internal */
export const Provider$inboundSchema: z.ZodNativeEnum<typeof Provider> = z
  .nativeEnum(Provider);

/** @internal */
export const Provider$outboundSchema: z.ZodNativeEnum<typeof Provider> =
  Provider$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Provider$ {
  /** @deprecated use `Provider$inboundSchema` instead. */
  export const inboundSchema = Provider$inboundSchema;
  /** @deprecated use `Provider$outboundSchema` instead. */
  export const outboundSchema = Provider$outboundSchema;
}

/** @internal */
export const Insurance$inboundSchema: z.ZodType<
  Insurance,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.string().optional(),
  content: z.string().optional(),
  currency: z.string().optional(),
  provider: Provider$inboundSchema.optional(),
});

/** @internal */
export type Insurance$Outbound = {
  amount?: string | undefined;
  content?: string | undefined;
  currency?: string | undefined;
  provider?: string | undefined;
};

/** @internal */
export const Insurance$outboundSchema: z.ZodType<
  Insurance$Outbound,
  z.ZodTypeDef,
  Insurance
> = z.object({
  amount: z.string().optional(),
  content: z.string().optional(),
  currency: z.string().optional(),
  provider: Provider$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Insurance$ {
  /** @deprecated use `Insurance$inboundSchema` instead. */
  export const inboundSchema = Insurance$inboundSchema;
  /** @deprecated use `Insurance$outboundSchema` instead. */
  export const outboundSchema = Insurance$outboundSchema;
  /** @deprecated use `Insurance$Outbound` instead. */
  export type Outbound = Insurance$Outbound;
}
