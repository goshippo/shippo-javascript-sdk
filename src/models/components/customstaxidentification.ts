/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * Type of tax identification.
 *
 * @remarks
 * * `EIN` - Employer Identification Number, also known as a Federal Tax Identification Number.
 * * `VAT` - Value Added Tax identification number.
 * * `IOSS` - Import One-Stop Shop
 * * `ARN` - Australian Taxation Office Reference Number
 */
export enum CustomsTaxIdentificationType {
    Ein = "EIN",
    Vat = "VAT",
    Ioss = "IOSS",
    Arn = "ARN",
}

/**
 * Tax identification that may be required to ship in certain countries. Typically used to assess duties on
 *
 * @remarks
 * goods that are crossing a border.
 */
export type CustomsTaxIdentification = {
    /**
     * Tax identification number.
     */
    number?: string | undefined;
    /**
     * Type of tax identification.
     *
     * @remarks
     * * `EIN` - Employer Identification Number, also known as a Federal Tax Identification Number.
     * * `VAT` - Value Added Tax identification number.
     * * `IOSS` - Import One-Stop Shop
     * * `ARN` - Australian Taxation Office Reference Number
     */
    type?: CustomsTaxIdentificationType | undefined;
};

/** @internal */
export namespace CustomsTaxIdentificationType$ {
    export const inboundSchema = z.nativeEnum(CustomsTaxIdentificationType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace CustomsTaxIdentification$ {
    export const inboundSchema: z.ZodType<CustomsTaxIdentification, z.ZodTypeDef, unknown> = z
        .object({
            number: z.string().optional(),
            type: CustomsTaxIdentificationType$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.number === undefined ? null : { number: v.number }),
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });

    export type Outbound = {
        number?: string | undefined;
        type?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CustomsTaxIdentification> = z
        .object({
            number: z.string().optional(),
            type: CustomsTaxIdentificationType$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.number === undefined ? null : { number: v.number }),
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });
}
