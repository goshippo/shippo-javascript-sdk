/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
    UPSConnectExistingOwnAccountParameters,
    UPSConnectExistingOwnAccountParameters$,
} from "./upsconnectexistingownaccountparameters";
import * as z from "zod";

export type ConnectExistingOwnUPSAccountRequest = {
    /**
     * This field is required as input to the API, but is not used for UPS. Use the empty string.
     */
    accountId: string;
    active: boolean;
    carrier?: string | undefined;
    metadata?: string | undefined;
    /**
     * An array of additional parameters for the account, such as e.g. password or token.
     *
     * @remarks
     * Please check the <a href="https://docs.goshippo.com/docs/carriers/carrieraccounts/">carrier accounts tutorial</a> page for the parameters per carrier.<br>
     * To protect account information, this field will be masked in any API response.
     */
    parameters: UPSConnectExistingOwnAccountParameters;
    test?: boolean | undefined;
};

/** @internal */
export namespace ConnectExistingOwnUPSAccountRequest$ {
    export type Inbound = {
        account_id: string;
        active: boolean;
        carrier?: string | undefined;
        metadata?: string | undefined;
        parameters: UPSConnectExistingOwnAccountParameters$.Inbound;
        test?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<
        ConnectExistingOwnUPSAccountRequest,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            account_id: z.string(),
            active: z.boolean(),
            carrier: z.string().optional(),
            metadata: z.string().optional(),
            parameters: UPSConnectExistingOwnAccountParameters$.inboundSchema,
            test: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                accountId: v.account_id,
                active: v.active,
                ...(v.carrier === undefined ? null : { carrier: v.carrier }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                parameters: v.parameters,
                ...(v.test === undefined ? null : { test: v.test }),
            };
        });

    export type Outbound = {
        account_id: string;
        active: boolean;
        carrier?: string | undefined;
        metadata?: string | undefined;
        parameters: UPSConnectExistingOwnAccountParameters$.Outbound;
        test?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        ConnectExistingOwnUPSAccountRequest
    > = z
        .object({
            accountId: z.string(),
            active: z.boolean(),
            carrier: z.string().optional(),
            metadata: z.string().optional(),
            parameters: UPSConnectExistingOwnAccountParameters$.outboundSchema,
            test: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                account_id: v.accountId,
                active: v.active,
                ...(v.carrier === undefined ? null : { carrier: v.carrier }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                parameters: v.parameters,
                ...(v.test === undefined ? null : { test: v.test }),
            };
        });
}
