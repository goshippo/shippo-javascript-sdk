/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Refund,
  Refund$inboundSchema,
  Refund$Outbound,
  Refund$outboundSchema,
} from "./refund.js";

export type RefundPaginatedList = {
  next?: string | undefined;
  previous?: string | undefined;
  results?: Array<Refund> | undefined;
};

/** @internal */
export const RefundPaginatedList$inboundSchema: z.ZodType<
  RefundPaginatedList,
  z.ZodTypeDef,
  unknown
> = z.object({
  next: z.string().optional(),
  previous: z.string().optional(),
  results: z.array(Refund$inboundSchema).optional(),
});

/** @internal */
export type RefundPaginatedList$Outbound = {
  next?: string | undefined;
  previous?: string | undefined;
  results?: Array<Refund$Outbound> | undefined;
};

/** @internal */
export const RefundPaginatedList$outboundSchema: z.ZodType<
  RefundPaginatedList$Outbound,
  z.ZodTypeDef,
  RefundPaginatedList
> = z.object({
  next: z.string().optional(),
  previous: z.string().optional(),
  results: z.array(Refund$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RefundPaginatedList$ {
  /** @deprecated use `RefundPaginatedList$inboundSchema` instead. */
  export const inboundSchema = RefundPaginatedList$inboundSchema;
  /** @deprecated use `RefundPaginatedList$outboundSchema` instead. */
  export const outboundSchema = RefundPaginatedList$outboundSchema;
  /** @deprecated use `RefundPaginatedList$Outbound` instead. */
  export type Outbound = RefundPaginatedList$Outbound;
}

export function refundPaginatedListToJSON(
  refundPaginatedList: RefundPaginatedList,
): string {
  return JSON.stringify(
    RefundPaginatedList$outboundSchema.parse(refundPaginatedList),
  );
}

export function refundPaginatedListFromJSON(
  jsonString: string,
): SafeParseResult<RefundPaginatedList, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RefundPaginatedList$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RefundPaginatedList' from JSON`,
  );
}
