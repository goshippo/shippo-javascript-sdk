/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CarrierParcelTemplate,
  CarrierParcelTemplate$inboundSchema,
  CarrierParcelTemplate$Outbound,
  CarrierParcelTemplate$outboundSchema,
} from "./carrierparceltemplate.js";

export type CarrierParcelTemplateList = {
  results?: Array<CarrierParcelTemplate> | undefined;
};

/** @internal */
export const CarrierParcelTemplateList$inboundSchema: z.ZodType<
  CarrierParcelTemplateList,
  z.ZodTypeDef,
  unknown
> = z.object({
  results: z.array(CarrierParcelTemplate$inboundSchema).optional(),
});

/** @internal */
export type CarrierParcelTemplateList$Outbound = {
  results?: Array<CarrierParcelTemplate$Outbound> | undefined;
};

/** @internal */
export const CarrierParcelTemplateList$outboundSchema: z.ZodType<
  CarrierParcelTemplateList$Outbound,
  z.ZodTypeDef,
  CarrierParcelTemplateList
> = z.object({
  results: z.array(CarrierParcelTemplate$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CarrierParcelTemplateList$ {
  /** @deprecated use `CarrierParcelTemplateList$inboundSchema` instead. */
  export const inboundSchema = CarrierParcelTemplateList$inboundSchema;
  /** @deprecated use `CarrierParcelTemplateList$outboundSchema` instead. */
  export const outboundSchema = CarrierParcelTemplateList$outboundSchema;
  /** @deprecated use `CarrierParcelTemplateList$Outbound` instead. */
  export type Outbound = CarrierParcelTemplateList$Outbound;
}

export function carrierParcelTemplateListToJSON(
  carrierParcelTemplateList: CarrierParcelTemplateList,
): string {
  return JSON.stringify(
    CarrierParcelTemplateList$outboundSchema.parse(carrierParcelTemplateList),
  );
}

export function carrierParcelTemplateListFromJSON(
  jsonString: string,
): SafeParseResult<CarrierParcelTemplateList, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CarrierParcelTemplateList$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CarrierParcelTemplateList' from JSON`,
  );
}
