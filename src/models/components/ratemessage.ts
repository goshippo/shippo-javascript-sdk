/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type RateMessage = {
    source?: string | undefined;
    code?: string | undefined;
    text?: string | undefined;
};

/** @internal */
export namespace RateMessage$ {
    export type Inbound = {
        source?: string | undefined;
        code?: string | undefined;
        text?: string | undefined;
    };

    export const inboundSchema: z.ZodType<RateMessage, z.ZodTypeDef, Inbound> = z
        .object({
            source: z.string().optional(),
            code: z.string().optional(),
            text: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.source === undefined ? null : { source: v.source }),
                ...(v.code === undefined ? null : { code: v.code }),
                ...(v.text === undefined ? null : { text: v.text }),
            };
        });

    export type Outbound = {
        source?: string | undefined;
        code?: string | undefined;
        text?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RateMessage> = z
        .object({
            source: z.string().optional(),
            code: z.string().optional(),
            text: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.source === undefined ? null : { source: v.source }),
                ...(v.code === undefined ? null : { code: v.code }),
                ...(v.text === undefined ? null : { text: v.text }),
            };
        });
}
