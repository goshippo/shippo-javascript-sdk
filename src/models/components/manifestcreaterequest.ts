/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { AddressCreateRequest, AddressCreateRequest$ } from "./addresscreaterequest.js";
import * as z from "zod";

export type ManifestCreateRequestAddressFrom = AddressCreateRequest | string;

export type ManifestCreateRequest = {
    /**
     * ID of carrier account
     */
    carrierAccount: string;
    /**
     * All shipments to be submitted on this day will be closed out.
     *
     * @remarks
     * Must be in the format `2014-01-18T00:35:03.463Z` (ISO 8601 date).
     */
    shipmentDate: string;
    /**
     * IDs transactions to use. If you set this to null or not send this parameter,
     *
     * @remarks
     * Shippo will automatically assign all applicable transactions.
     */
    transactions?: Array<string> | undefined;
    addressFrom: AddressCreateRequest | string;
    async?: boolean | undefined;
};

/** @internal */
export namespace ManifestCreateRequestAddressFrom$ {
    export const inboundSchema: z.ZodType<ManifestCreateRequestAddressFrom, z.ZodTypeDef, unknown> =
        z.union([AddressCreateRequest$.inboundSchema, z.string()]);

    export type Outbound = AddressCreateRequest$.Outbound | string;
    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        ManifestCreateRequestAddressFrom
    > = z.union([AddressCreateRequest$.outboundSchema, z.string()]);
}

/** @internal */
export namespace ManifestCreateRequest$ {
    export const inboundSchema: z.ZodType<ManifestCreateRequest, z.ZodTypeDef, unknown> = z
        .object({
            carrier_account: z.string(),
            shipment_date: z.string(),
            transactions: z.array(z.string()).optional(),
            address_from: z.union([AddressCreateRequest$.inboundSchema, z.string()]),
            async: z.boolean().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                carrier_account: "carrierAccount",
                shipment_date: "shipmentDate",
                address_from: "addressFrom",
            });
        });

    export type Outbound = {
        carrier_account: string;
        shipment_date: string;
        transactions?: Array<string> | undefined;
        address_from: AddressCreateRequest$.Outbound | string;
        async?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ManifestCreateRequest> = z
        .object({
            carrierAccount: z.string(),
            shipmentDate: z.string(),
            transactions: z.array(z.string()).optional(),
            addressFrom: z.union([AddressCreateRequest$.outboundSchema, z.string()]),
            async: z.boolean().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                carrierAccount: "carrier_account",
                shipmentDate: "shipment_date",
                addressFrom: "address_from",
            });
        });
}
