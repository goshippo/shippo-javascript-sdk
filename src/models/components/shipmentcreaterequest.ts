/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import {
  AddressCreateRequest,
  AddressCreateRequest$inboundSchema,
  AddressCreateRequest$Outbound,
  AddressCreateRequest$outboundSchema,
} from "./addresscreaterequest.js";
import {
  CustomsDeclarationCreateRequest,
  CustomsDeclarationCreateRequest$inboundSchema,
  CustomsDeclarationCreateRequest$Outbound,
  CustomsDeclarationCreateRequest$outboundSchema,
} from "./customsdeclarationcreaterequest.js";
import {
  ParcelCreateFromTemplateRequest,
  ParcelCreateFromTemplateRequest$inboundSchema,
  ParcelCreateFromTemplateRequest$Outbound,
  ParcelCreateFromTemplateRequest$outboundSchema,
} from "./parcelcreatefromtemplaterequest.js";
import {
  ParcelCreateRequest,
  ParcelCreateRequest$inboundSchema,
  ParcelCreateRequest$Outbound,
  ParcelCreateRequest$outboundSchema,
} from "./parcelcreaterequest.js";
import {
  ShipmentExtra,
  ShipmentExtra$inboundSchema,
  ShipmentExtra$Outbound,
  ShipmentExtra$outboundSchema,
} from "./shipmentextra.js";

export type AddressFrom = AddressCreateRequest | string;

export type AddressReturn = AddressCreateRequest | string;

export type AddressTo = AddressCreateRequest | string;

export type ShipmentCreateRequestCustomsDeclaration =
  | CustomsDeclarationCreateRequest
  | string;

export type Parcels =
  | ParcelCreateFromTemplateRequest
  | ParcelCreateRequest
  | string;

export type ShipmentCreateRequest = {
  /**
   * An object holding optional extra services to be requested.
   */
  extra?: ShipmentExtra | undefined;
  /**
   * A string of up to 100 characters that can be filled with any additional information you want to attach to the object.
   */
  metadata?: string | undefined;
  /**
   * Date the shipment will be tendered to the carrier. Must be in the format `2014-01-18T00:35:03.463Z`.
   *
   * @remarks
   * Defaults to current date and time if no value is provided. Please note that some carriers require this value to
   * be in the future, on a working day, or similar.
   */
  shipmentDate?: string | undefined;
  addressFrom: AddressCreateRequest | string;
  addressReturn?: AddressCreateRequest | string | undefined;
  addressTo: AddressCreateRequest | string;
  customsDeclaration?: CustomsDeclarationCreateRequest | string | undefined;
  async?: boolean | undefined;
  /**
   * List of <a href="#tag/Carrier-Accounts/">Carrier Accounts</a> `object_id`s used to filter
   *
   * @remarks
   * the returned rates.  If set, only rates from these carriers will be returned.
   */
  carrierAccounts?: Array<string> | undefined;
  parcels: Array<
    ParcelCreateFromTemplateRequest | ParcelCreateRequest | string
  >;
};

/** @internal */
export const AddressFrom$inboundSchema: z.ZodType<
  AddressFrom,
  z.ZodTypeDef,
  unknown
> = z.union([AddressCreateRequest$inboundSchema, z.string()]);

/** @internal */
export type AddressFrom$Outbound = AddressCreateRequest$Outbound | string;

/** @internal */
export const AddressFrom$outboundSchema: z.ZodType<
  AddressFrom$Outbound,
  z.ZodTypeDef,
  AddressFrom
> = z.union([AddressCreateRequest$outboundSchema, z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddressFrom$ {
  /** @deprecated use `AddressFrom$inboundSchema` instead. */
  export const inboundSchema = AddressFrom$inboundSchema;
  /** @deprecated use `AddressFrom$outboundSchema` instead. */
  export const outboundSchema = AddressFrom$outboundSchema;
  /** @deprecated use `AddressFrom$Outbound` instead. */
  export type Outbound = AddressFrom$Outbound;
}

/** @internal */
export const AddressReturn$inboundSchema: z.ZodType<
  AddressReturn,
  z.ZodTypeDef,
  unknown
> = z.union([AddressCreateRequest$inboundSchema, z.string()]);

/** @internal */
export type AddressReturn$Outbound = AddressCreateRequest$Outbound | string;

/** @internal */
export const AddressReturn$outboundSchema: z.ZodType<
  AddressReturn$Outbound,
  z.ZodTypeDef,
  AddressReturn
> = z.union([AddressCreateRequest$outboundSchema, z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddressReturn$ {
  /** @deprecated use `AddressReturn$inboundSchema` instead. */
  export const inboundSchema = AddressReturn$inboundSchema;
  /** @deprecated use `AddressReturn$outboundSchema` instead. */
  export const outboundSchema = AddressReturn$outboundSchema;
  /** @deprecated use `AddressReturn$Outbound` instead. */
  export type Outbound = AddressReturn$Outbound;
}

/** @internal */
export const AddressTo$inboundSchema: z.ZodType<
  AddressTo,
  z.ZodTypeDef,
  unknown
> = z.union([AddressCreateRequest$inboundSchema, z.string()]);

/** @internal */
export type AddressTo$Outbound = AddressCreateRequest$Outbound | string;

/** @internal */
export const AddressTo$outboundSchema: z.ZodType<
  AddressTo$Outbound,
  z.ZodTypeDef,
  AddressTo
> = z.union([AddressCreateRequest$outboundSchema, z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddressTo$ {
  /** @deprecated use `AddressTo$inboundSchema` instead. */
  export const inboundSchema = AddressTo$inboundSchema;
  /** @deprecated use `AddressTo$outboundSchema` instead. */
  export const outboundSchema = AddressTo$outboundSchema;
  /** @deprecated use `AddressTo$Outbound` instead. */
  export type Outbound = AddressTo$Outbound;
}

/** @internal */
export const ShipmentCreateRequestCustomsDeclaration$inboundSchema: z.ZodType<
  ShipmentCreateRequestCustomsDeclaration,
  z.ZodTypeDef,
  unknown
> = z.union([CustomsDeclarationCreateRequest$inboundSchema, z.string()]);

/** @internal */
export type ShipmentCreateRequestCustomsDeclaration$Outbound =
  | CustomsDeclarationCreateRequest$Outbound
  | string;

/** @internal */
export const ShipmentCreateRequestCustomsDeclaration$outboundSchema: z.ZodType<
  ShipmentCreateRequestCustomsDeclaration$Outbound,
  z.ZodTypeDef,
  ShipmentCreateRequestCustomsDeclaration
> = z.union([CustomsDeclarationCreateRequest$outboundSchema, z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ShipmentCreateRequestCustomsDeclaration$ {
  /** @deprecated use `ShipmentCreateRequestCustomsDeclaration$inboundSchema` instead. */
  export const inboundSchema =
    ShipmentCreateRequestCustomsDeclaration$inboundSchema;
  /** @deprecated use `ShipmentCreateRequestCustomsDeclaration$outboundSchema` instead. */
  export const outboundSchema =
    ShipmentCreateRequestCustomsDeclaration$outboundSchema;
  /** @deprecated use `ShipmentCreateRequestCustomsDeclaration$Outbound` instead. */
  export type Outbound = ShipmentCreateRequestCustomsDeclaration$Outbound;
}

/** @internal */
export const Parcels$inboundSchema: z.ZodType<Parcels, z.ZodTypeDef, unknown> =
  z.union([
    ParcelCreateFromTemplateRequest$inboundSchema,
    ParcelCreateRequest$inboundSchema,
    z.string(),
  ]);

/** @internal */
export type Parcels$Outbound =
  | ParcelCreateFromTemplateRequest$Outbound
  | ParcelCreateRequest$Outbound
  | string;

/** @internal */
export const Parcels$outboundSchema: z.ZodType<
  Parcels$Outbound,
  z.ZodTypeDef,
  Parcels
> = z.union([
  ParcelCreateFromTemplateRequest$outboundSchema,
  ParcelCreateRequest$outboundSchema,
  z.string(),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Parcels$ {
  /** @deprecated use `Parcels$inboundSchema` instead. */
  export const inboundSchema = Parcels$inboundSchema;
  /** @deprecated use `Parcels$outboundSchema` instead. */
  export const outboundSchema = Parcels$outboundSchema;
  /** @deprecated use `Parcels$Outbound` instead. */
  export type Outbound = Parcels$Outbound;
}

/** @internal */
export const ShipmentCreateRequest$inboundSchema: z.ZodType<
  ShipmentCreateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  extra: ShipmentExtra$inboundSchema.optional(),
  metadata: z.string().optional(),
  shipment_date: z.string().optional(),
  address_from: z.union([AddressCreateRequest$inboundSchema, z.string()]),
  address_return: z.union([AddressCreateRequest$inboundSchema, z.string()])
    .optional(),
  address_to: z.union([AddressCreateRequest$inboundSchema, z.string()]),
  customs_declaration: z.union([
    CustomsDeclarationCreateRequest$inboundSchema,
    z.string(),
  ]).optional(),
  async: z.boolean().optional(),
  carrier_accounts: z.array(z.string()).optional(),
  parcels: z.array(
    z.union([
      ParcelCreateFromTemplateRequest$inboundSchema,
      ParcelCreateRequest$inboundSchema,
      z.string(),
    ]),
  ),
}).transform((v) => {
  return remap$(v, {
    "shipment_date": "shipmentDate",
    "address_from": "addressFrom",
    "address_return": "addressReturn",
    "address_to": "addressTo",
    "customs_declaration": "customsDeclaration",
    "carrier_accounts": "carrierAccounts",
  });
});

/** @internal */
export type ShipmentCreateRequest$Outbound = {
  extra?: ShipmentExtra$Outbound | undefined;
  metadata?: string | undefined;
  shipment_date?: string | undefined;
  address_from: AddressCreateRequest$Outbound | string;
  address_return?: AddressCreateRequest$Outbound | string | undefined;
  address_to: AddressCreateRequest$Outbound | string;
  customs_declaration?:
    | CustomsDeclarationCreateRequest$Outbound
    | string
    | undefined;
  async?: boolean | undefined;
  carrier_accounts?: Array<string> | undefined;
  parcels: Array<
    | ParcelCreateFromTemplateRequest$Outbound
    | ParcelCreateRequest$Outbound
    | string
  >;
};

/** @internal */
export const ShipmentCreateRequest$outboundSchema: z.ZodType<
  ShipmentCreateRequest$Outbound,
  z.ZodTypeDef,
  ShipmentCreateRequest
> = z.object({
  extra: ShipmentExtra$outboundSchema.optional(),
  metadata: z.string().optional(),
  shipmentDate: z.string().optional(),
  addressFrom: z.union([AddressCreateRequest$outboundSchema, z.string()]),
  addressReturn: z.union([AddressCreateRequest$outboundSchema, z.string()])
    .optional(),
  addressTo: z.union([AddressCreateRequest$outboundSchema, z.string()]),
  customsDeclaration: z.union([
    CustomsDeclarationCreateRequest$outboundSchema,
    z.string(),
  ]).optional(),
  async: z.boolean().optional(),
  carrierAccounts: z.array(z.string()).optional(),
  parcels: z.array(
    z.union([
      ParcelCreateFromTemplateRequest$outboundSchema,
      ParcelCreateRequest$outboundSchema,
      z.string(),
    ]),
  ),
}).transform((v) => {
  return remap$(v, {
    shipmentDate: "shipment_date",
    addressFrom: "address_from",
    addressReturn: "address_return",
    addressTo: "address_to",
    customsDeclaration: "customs_declaration",
    carrierAccounts: "carrier_accounts",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ShipmentCreateRequest$ {
  /** @deprecated use `ShipmentCreateRequest$inboundSchema` instead. */
  export const inboundSchema = ShipmentCreateRequest$inboundSchema;
  /** @deprecated use `ShipmentCreateRequest$outboundSchema` instead. */
  export const outboundSchema = ShipmentCreateRequest$outboundSchema;
  /** @deprecated use `ShipmentCreateRequest$Outbound` instead. */
  export type Outbound = ShipmentCreateRequest$Outbound;
}
