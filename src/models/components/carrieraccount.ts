/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
    CarrierAccountServiceLevel,
    CarrierAccountServiceLevel$,
} from "./carrieraccountservicelevel";
import {
    UPSConnectExistingOwnAccountParameters,
    UPSConnectExistingOwnAccountParameters$,
} from "./upsconnectexistingownaccountparameters";
import * as z from "zod";

export type CarrierAccountParameters = UPSConnectExistingOwnAccountParameters | Record<string, any>;

export type CarrierAccount = {
    /**
     * Unique identifier of the account. Please check the <a href="https://docs.goshippo.com/docs/carriers/carrieraccounts/">carrier accounts tutorial</a>
     *
     * @remarks
     * page for the `account_id` per carrier.<br>
     * To protect account information, this field will be masked in any API response.
     */
    accountId: string;
    /**
     * Determines whether the account is active. When creating a shipment, if no `carrier_accounts` are explicitly
     *
     * @remarks
     * passed Shippo will query all carrier accounts that have this field set. By default, this is set to True.
     */
    active?: boolean | undefined;
    /**
     * Carrier token, see <a href="#tag/Carriers">Carriers</a><br>
     *
     * @remarks
     * Please check the <a href="https://docs.goshippo.com/docs/carriers/carrieraccounts/">carrier accounts tutorial</a> page for all supported carriers.
     */
    carrier: string;
    parameters?: UPSConnectExistingOwnAccountParameters | Record<string, any> | undefined;
    /**
     * Carrier name, see <a href="#tag/Carriers">Carriers</a><br>
     */
    carrierName?: any | undefined;
    isShippoAccount?: boolean | undefined;
    metadata?: string | undefined;
    /**
     * Unique identifier of the carrier account object.
     */
    objectId?: string | undefined;
    /**
     * Username of the user who created the carrier account object.
     */
    objectOwner?: string | undefined;
    serviceLevels?: Array<CarrierAccountServiceLevel> | undefined;
    /**
     * Indicates whether the object has been created in test mode.
     */
    test?: boolean | undefined;
};

/** @internal */
export namespace CarrierAccountParameters$ {
    export type Inbound = UPSConnectExistingOwnAccountParameters$.Inbound | Record<string, any>;

    export type Outbound = UPSConnectExistingOwnAccountParameters$.Outbound | Record<string, any>;
    export const inboundSchema: z.ZodType<CarrierAccountParameters, z.ZodTypeDef, Inbound> =
        z.union([UPSConnectExistingOwnAccountParameters$.inboundSchema, z.record(z.any())]);
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CarrierAccountParameters> =
        z.union([UPSConnectExistingOwnAccountParameters$.outboundSchema, z.record(z.any())]);
}

/** @internal */
export namespace CarrierAccount$ {
    export type Inbound = {
        account_id: string;
        active?: boolean | undefined;
        carrier: string;
        parameters?:
            | UPSConnectExistingOwnAccountParameters$.Inbound
            | Record<string, any>
            | undefined;
        carrier_name?: any | undefined;
        is_shippo_account?: boolean | undefined;
        metadata?: string | undefined;
        object_id?: string | undefined;
        object_owner?: string | undefined;
        service_levels?: Array<CarrierAccountServiceLevel$.Inbound> | undefined;
        test?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<CarrierAccount, z.ZodTypeDef, Inbound> = z
        .object({
            account_id: z.string(),
            active: z.boolean().optional(),
            carrier: z.string(),
            parameters: z
                .union([UPSConnectExistingOwnAccountParameters$.inboundSchema, z.record(z.any())])
                .optional(),
            carrier_name: z.any().optional(),
            is_shippo_account: z.boolean().optional(),
            metadata: z.string().optional(),
            object_id: z.string().optional(),
            object_owner: z.string().optional(),
            service_levels: z.array(CarrierAccountServiceLevel$.inboundSchema).optional(),
            test: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                accountId: v.account_id,
                ...(v.active === undefined ? null : { active: v.active }),
                carrier: v.carrier,
                ...(v.parameters === undefined ? null : { parameters: v.parameters }),
                ...(v.carrier_name === undefined ? null : { carrierName: v.carrier_name }),
                ...(v.is_shippo_account === undefined
                    ? null
                    : { isShippoAccount: v.is_shippo_account }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                ...(v.object_id === undefined ? null : { objectId: v.object_id }),
                ...(v.object_owner === undefined ? null : { objectOwner: v.object_owner }),
                ...(v.service_levels === undefined ? null : { serviceLevels: v.service_levels }),
                ...(v.test === undefined ? null : { test: v.test }),
            };
        });

    export type Outbound = {
        account_id: string;
        active?: boolean | undefined;
        carrier: string;
        parameters?:
            | UPSConnectExistingOwnAccountParameters$.Outbound
            | Record<string, any>
            | undefined;
        carrier_name?: any | undefined;
        is_shippo_account?: boolean | undefined;
        metadata?: string | undefined;
        object_id?: string | undefined;
        object_owner?: string | undefined;
        service_levels?: Array<CarrierAccountServiceLevel$.Outbound> | undefined;
        test?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CarrierAccount> = z
        .object({
            accountId: z.string(),
            active: z.boolean().optional(),
            carrier: z.string(),
            parameters: z
                .union([UPSConnectExistingOwnAccountParameters$.outboundSchema, z.record(z.any())])
                .optional(),
            carrierName: z.any().optional(),
            isShippoAccount: z.boolean().optional(),
            metadata: z.string().optional(),
            objectId: z.string().optional(),
            objectOwner: z.string().optional(),
            serviceLevels: z.array(CarrierAccountServiceLevel$.outboundSchema).optional(),
            test: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                account_id: v.accountId,
                ...(v.active === undefined ? null : { active: v.active }),
                carrier: v.carrier,
                ...(v.parameters === undefined ? null : { parameters: v.parameters }),
                ...(v.carrierName === undefined ? null : { carrier_name: v.carrierName }),
                ...(v.isShippoAccount === undefined
                    ? null
                    : { is_shippo_account: v.isShippoAccount }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                ...(v.objectId === undefined ? null : { object_id: v.objectId }),
                ...(v.objectOwner === undefined ? null : { object_owner: v.objectOwner }),
                ...(v.serviceLevels === undefined ? null : { service_levels: v.serviceLevels }),
                ...(v.test === undefined ? null : { test: v.test }),
            };
        });
}
