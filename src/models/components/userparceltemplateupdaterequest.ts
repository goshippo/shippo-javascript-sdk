/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import {
  DistanceUnitEnum,
  DistanceUnitEnum$inboundSchema,
  DistanceUnitEnum$outboundSchema,
} from "./distanceunitenum.js";
import {
  WeightUnitEnum,
  WeightUnitEnum$inboundSchema,
  WeightUnitEnum$outboundSchema,
} from "./weightunitenum.js";

export type UserParcelTemplateUpdateRequest = {
  /**
   * The measure unit used for length, width and height.
   */
  distanceUnit: DistanceUnitEnum;
  /**
   * The height of the package, in units specified by the `distance_unit` attribute. Required, but if using a preset carrier template then this field must be empty.
   */
  height: string;
  /**
   * The length of the package, in units specified by the `distance_unit` attribute. Required, but if using a preset carrier template then this field must be empty.
   */
  length: string;
  /**
   * The name of the User Parcel Template
   */
  name: string;
  /**
   * The weight of the package, in units specified by the weight_unit attribute.
   */
  weight?: string | undefined;
  /**
   * The unit used for weight.
   */
  weightUnit?: WeightUnitEnum | undefined;
  /**
   * The width of the package, in units specified by the `distance_unit` attribute. Required, but if using a preset carrier template then this field must be empty.
   */
  width: string;
};

/** @internal */
export const UserParcelTemplateUpdateRequest$inboundSchema: z.ZodType<
  UserParcelTemplateUpdateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  distance_unit: DistanceUnitEnum$inboundSchema,
  height: z.string(),
  length: z.string(),
  name: z.string(),
  weight: z.string().optional(),
  weight_unit: WeightUnitEnum$inboundSchema.optional(),
  width: z.string(),
}).transform((v) => {
  return remap$(v, {
    "distance_unit": "distanceUnit",
    "weight_unit": "weightUnit",
  });
});

/** @internal */
export type UserParcelTemplateUpdateRequest$Outbound = {
  distance_unit: string;
  height: string;
  length: string;
  name: string;
  weight?: string | undefined;
  weight_unit?: string | undefined;
  width: string;
};

/** @internal */
export const UserParcelTemplateUpdateRequest$outboundSchema: z.ZodType<
  UserParcelTemplateUpdateRequest$Outbound,
  z.ZodTypeDef,
  UserParcelTemplateUpdateRequest
> = z.object({
  distanceUnit: DistanceUnitEnum$outboundSchema,
  height: z.string(),
  length: z.string(),
  name: z.string(),
  weight: z.string().optional(),
  weightUnit: WeightUnitEnum$outboundSchema.optional(),
  width: z.string(),
}).transform((v) => {
  return remap$(v, {
    distanceUnit: "distance_unit",
    weightUnit: "weight_unit",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserParcelTemplateUpdateRequest$ {
  /** @deprecated use `UserParcelTemplateUpdateRequest$inboundSchema` instead. */
  export const inboundSchema = UserParcelTemplateUpdateRequest$inboundSchema;
  /** @deprecated use `UserParcelTemplateUpdateRequest$outboundSchema` instead. */
  export const outboundSchema = UserParcelTemplateUpdateRequest$outboundSchema;
  /** @deprecated use `UserParcelTemplateUpdateRequest$Outbound` instead. */
  export type Outbound = UserParcelTemplateUpdateRequest$Outbound;
}
