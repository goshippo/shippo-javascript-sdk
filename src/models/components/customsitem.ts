/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ObjectState, ObjectState$ } from "./objectstate";
import { WeightUnit, WeightUnit$ } from "./weightunit";
import * as z from "zod";

export type CustomsItem = {
    /**
     * Text description of your item.
     */
    description: string;
    /**
     * Export Control Classification Number, required on some exports from the United States.
     */
    eccnEar99?: string | undefined;
    /**
     * The unit used for weight.
     */
    massUnit: WeightUnit;
    /**
     * A string of up to 100 characters that can be filled with any additional information you
     *
     * @remarks
     * want to attach to the object.
     */
    metadata?: string | undefined;
    /**
     * Total weight of this item, i.e. quantity * weight per item.
     */
    netWeight: string;
    /**
     * Country of origin of the item. Example: `US` or `DE`.
     *
     * @remarks
     * All accepted values can be found on the <a href="http://www.iso.org/" target="_blank">Official ISO Website</a>.
     */
    originCountry: string;
    /**
     * Quantity of this item in the shipment you send.  Must be greater than 0.
     */
    quantity: number;
    /**
     * SKU code of the item, which is required by some carriers.
     */
    skuCode?: string | undefined;
    /**
     * The tariff number of the item.
     */
    tariffNumber?: string | undefined;
    /**
     * Total value of this item, i.e. quantity * value per item.
     */
    valueAmount: string;
    /**
     * Currency used for value_amount. The <a href="http://www.xe.com/iso4217.php">official ISO 4217</a>
     *
     * @remarks
     * currency codes are used, e.g.  `USD` or `EUR`.
     */
    valueCurrency: string;
    /**
     * Date and time of object creation.
     */
    objectCreated?: Date | undefined;
    /**
     * Unique identifier of the given object.
     */
    objectId?: string | undefined;
    /**
     * Username of the user who created the object.
     */
    objectOwner?: string | undefined;
    /**
     * Indicates the validity of the enclosing object
     */
    objectState?: ObjectState | undefined;
    /**
     * Date and time of last object update.
     */
    objectUpdated?: Date | undefined;
    /**
     * Indicates whether the object has been created in test mode.
     */
    test?: boolean | undefined;
};

/** @internal */
export namespace CustomsItem$ {
    export type Inbound = {
        description: string;
        eccn_ear99?: string | undefined;
        mass_unit: WeightUnit;
        metadata?: string | undefined;
        net_weight: string;
        origin_country: string;
        quantity: number;
        sku_code?: string | undefined;
        tariff_number?: string | undefined;
        value_amount: string;
        value_currency: string;
        object_created?: string | undefined;
        object_id?: string | undefined;
        object_owner?: string | undefined;
        object_state?: ObjectState | undefined;
        object_updated?: string | undefined;
        test?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<CustomsItem, z.ZodTypeDef, Inbound> = z
        .object({
            description: z.string(),
            eccn_ear99: z.string().optional(),
            mass_unit: WeightUnit$,
            metadata: z.string().optional(),
            net_weight: z.string(),
            origin_country: z.string(),
            quantity: z.number().int(),
            sku_code: z.string().optional(),
            tariff_number: z.string().optional(),
            value_amount: z.string(),
            value_currency: z.string(),
            object_created: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            object_id: z.string().optional(),
            object_owner: z.string().optional(),
            object_state: ObjectState$.optional(),
            object_updated: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            test: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                description: v.description,
                ...(v.eccn_ear99 === undefined ? null : { eccnEar99: v.eccn_ear99 }),
                massUnit: v.mass_unit,
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                netWeight: v.net_weight,
                originCountry: v.origin_country,
                quantity: v.quantity,
                ...(v.sku_code === undefined ? null : { skuCode: v.sku_code }),
                ...(v.tariff_number === undefined ? null : { tariffNumber: v.tariff_number }),
                valueAmount: v.value_amount,
                valueCurrency: v.value_currency,
                ...(v.object_created === undefined ? null : { objectCreated: v.object_created }),
                ...(v.object_id === undefined ? null : { objectId: v.object_id }),
                ...(v.object_owner === undefined ? null : { objectOwner: v.object_owner }),
                ...(v.object_state === undefined ? null : { objectState: v.object_state }),
                ...(v.object_updated === undefined ? null : { objectUpdated: v.object_updated }),
                ...(v.test === undefined ? null : { test: v.test }),
            };
        });

    export type Outbound = {
        description: string;
        eccn_ear99?: string | undefined;
        mass_unit: WeightUnit;
        metadata?: string | undefined;
        net_weight: string;
        origin_country: string;
        quantity: number;
        sku_code?: string | undefined;
        tariff_number?: string | undefined;
        value_amount: string;
        value_currency: string;
        object_created?: string | undefined;
        object_id?: string | undefined;
        object_owner?: string | undefined;
        object_state?: ObjectState | undefined;
        object_updated?: string | undefined;
        test?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CustomsItem> = z
        .object({
            description: z.string(),
            eccnEar99: z.string().optional(),
            massUnit: WeightUnit$,
            metadata: z.string().optional(),
            netWeight: z.string(),
            originCountry: z.string(),
            quantity: z.number().int(),
            skuCode: z.string().optional(),
            tariffNumber: z.string().optional(),
            valueAmount: z.string(),
            valueCurrency: z.string(),
            objectCreated: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            objectId: z.string().optional(),
            objectOwner: z.string().optional(),
            objectState: ObjectState$.optional(),
            objectUpdated: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            test: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                description: v.description,
                ...(v.eccnEar99 === undefined ? null : { eccn_ear99: v.eccnEar99 }),
                mass_unit: v.massUnit,
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                net_weight: v.netWeight,
                origin_country: v.originCountry,
                quantity: v.quantity,
                ...(v.skuCode === undefined ? null : { sku_code: v.skuCode }),
                ...(v.tariffNumber === undefined ? null : { tariff_number: v.tariffNumber }),
                value_amount: v.valueAmount,
                value_currency: v.valueCurrency,
                ...(v.objectCreated === undefined ? null : { object_created: v.objectCreated }),
                ...(v.objectId === undefined ? null : { object_id: v.objectId }),
                ...(v.objectOwner === undefined ? null : { object_owner: v.objectOwner }),
                ...(v.objectState === undefined ? null : { object_state: v.objectState }),
                ...(v.objectUpdated === undefined ? null : { object_updated: v.objectUpdated }),
                ...(v.test === undefined ? null : { test: v.test }),
            };
        });
}
