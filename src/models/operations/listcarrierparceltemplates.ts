/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * filter by user or enabled
 */
export enum Include {
    All = "all",
    User = "user",
    Enabled = "enabled",
}

export type ListCarrierParcelTemplatesRequest = {
    /**
     * filter by user or enabled
     */
    include?: Include | undefined;
    /**
     * filter by specific carrier
     */
    carrier?: string | undefined;
};

/** @internal */
export namespace Include$ {
    export const inboundSchema = z.nativeEnum(Include);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace ListCarrierParcelTemplatesRequest$ {
    export const inboundSchema: z.ZodType<
        ListCarrierParcelTemplatesRequest,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            include: Include$.inboundSchema.optional(),
            carrier: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.include === undefined ? null : { include: v.include }),
                ...(v.carrier === undefined ? null : { carrier: v.carrier }),
            };
        });

    export type Outbound = {
        include?: string | undefined;
        carrier?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        ListCarrierParcelTemplatesRequest
    > = z
        .object({
            include: Include$.outboundSchema.optional(),
            carrier: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.include === undefined ? null : { include: v.include }),
                ...(v.carrier === undefined ? null : { carrier: v.carrier }),
            };
        });
}
