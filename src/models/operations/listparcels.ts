/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListParcelsGlobals = {
  /**
   * Optional string used to pick a non-default API version to use. See our <a href="https://docs.goshippo.com/docs/api_concepts/apiversioning/">API version</a> guide.
   */
  shippoApiVersion?: string | undefined;
};

export type ListParcelsRequest = {
  /**
   * The page number you want to select
   */
  page?: number | undefined;
  /**
   * The number of results to return per page (max 100)
   */
  results?: number | undefined;
};

/** @internal */
export const ListParcelsGlobals$inboundSchema: z.ZodType<
  ListParcelsGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "SHIPPO-API-VERSION": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "SHIPPO-API-VERSION": "shippoApiVersion",
  });
});

/** @internal */
export type ListParcelsGlobals$Outbound = {
  "SHIPPO-API-VERSION"?: string | undefined;
};

/** @internal */
export const ListParcelsGlobals$outboundSchema: z.ZodType<
  ListParcelsGlobals$Outbound,
  z.ZodTypeDef,
  ListParcelsGlobals
> = z.object({
  shippoApiVersion: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    shippoApiVersion: "SHIPPO-API-VERSION",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListParcelsGlobals$ {
  /** @deprecated use `ListParcelsGlobals$inboundSchema` instead. */
  export const inboundSchema = ListParcelsGlobals$inboundSchema;
  /** @deprecated use `ListParcelsGlobals$outboundSchema` instead. */
  export const outboundSchema = ListParcelsGlobals$outboundSchema;
  /** @deprecated use `ListParcelsGlobals$Outbound` instead. */
  export type Outbound = ListParcelsGlobals$Outbound;
}

export function listParcelsGlobalsToJSON(
  listParcelsGlobals: ListParcelsGlobals,
): string {
  return JSON.stringify(
    ListParcelsGlobals$outboundSchema.parse(listParcelsGlobals),
  );
}

export function listParcelsGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<ListParcelsGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListParcelsGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListParcelsGlobals' from JSON`,
  );
}

/** @internal */
export const ListParcelsRequest$inboundSchema: z.ZodType<
  ListParcelsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  page: z.number().int().default(1),
  results: z.number().int().default(25),
});

/** @internal */
export type ListParcelsRequest$Outbound = {
  page: number;
  results: number;
};

/** @internal */
export const ListParcelsRequest$outboundSchema: z.ZodType<
  ListParcelsRequest$Outbound,
  z.ZodTypeDef,
  ListParcelsRequest
> = z.object({
  page: z.number().int().default(1),
  results: z.number().int().default(25),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListParcelsRequest$ {
  /** @deprecated use `ListParcelsRequest$inboundSchema` instead. */
  export const inboundSchema = ListParcelsRequest$inboundSchema;
  /** @deprecated use `ListParcelsRequest$outboundSchema` instead. */
  export const outboundSchema = ListParcelsRequest$outboundSchema;
  /** @deprecated use `ListParcelsRequest$Outbound` instead. */
  export type Outbound = ListParcelsRequest$Outbound;
}

export function listParcelsRequestToJSON(
  listParcelsRequest: ListParcelsRequest,
): string {
  return JSON.stringify(
    ListParcelsRequest$outboundSchema.parse(listParcelsRequest),
  );
}

export function listParcelsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListParcelsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListParcelsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListParcelsRequest' from JSON`,
  );
}
