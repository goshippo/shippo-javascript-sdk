/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type CreateCustomsDeclarationRequest = {
    /**
     * String used to pick a non-default API version to use
     */
    shippoApiVersion?: string | undefined;
    /**
     * CustomsDeclaration details.
     */
    customsDeclarationCreateRequest?: components.CustomsDeclarationCreateRequest | undefined;
};

export type CreateCustomsDeclarationResponse = {
    httpMeta: components.HTTPMetadata;
    customsDeclaration?: components.CustomsDeclaration | undefined;
};

/** @internal */
export namespace CreateCustomsDeclarationRequest$ {
    export type Inbound = {
        "SHIPPO-API-VERSION"?: string | undefined;
        CustomsDeclarationCreateRequest?:
            | components.CustomsDeclarationCreateRequest$.Inbound
            | undefined;
    };

    export const inboundSchema: z.ZodType<CreateCustomsDeclarationRequest, z.ZodTypeDef, Inbound> =
        z
            .object({
                "SHIPPO-API-VERSION": z.string().optional(),
                CustomsDeclarationCreateRequest:
                    components.CustomsDeclarationCreateRequest$.inboundSchema.optional(),
            })
            .transform((v) => {
                return {
                    ...(v["SHIPPO-API-VERSION"] === undefined
                        ? null
                        : { shippoApiVersion: v["SHIPPO-API-VERSION"] }),
                    ...(v.CustomsDeclarationCreateRequest === undefined
                        ? null
                        : { customsDeclarationCreateRequest: v.CustomsDeclarationCreateRequest }),
                };
            });

    export type Outbound = {
        "SHIPPO-API-VERSION"?: string | undefined;
        CustomsDeclarationCreateRequest?:
            | components.CustomsDeclarationCreateRequest$.Outbound
            | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        CreateCustomsDeclarationRequest
    > = z
        .object({
            shippoApiVersion: z.string().optional(),
            customsDeclarationCreateRequest:
                components.CustomsDeclarationCreateRequest$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.shippoApiVersion === undefined
                    ? null
                    : { "SHIPPO-API-VERSION": v.shippoApiVersion }),
                ...(v.customsDeclarationCreateRequest === undefined
                    ? null
                    : { CustomsDeclarationCreateRequest: v.customsDeclarationCreateRequest }),
            };
        });
}

/** @internal */
export namespace CreateCustomsDeclarationResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
        CustomsDeclaration?: components.CustomsDeclaration$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<CreateCustomsDeclarationResponse, z.ZodTypeDef, Inbound> =
        z
            .object({
                HttpMeta: components.HTTPMetadata$.inboundSchema,
                CustomsDeclaration: components.CustomsDeclaration$.inboundSchema.optional(),
            })
            .transform((v) => {
                return {
                    httpMeta: v.HttpMeta,
                    ...(v.CustomsDeclaration === undefined
                        ? null
                        : { customsDeclaration: v.CustomsDeclaration }),
                };
            });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        CustomsDeclaration?: components.CustomsDeclaration$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        CreateCustomsDeclarationResponse
    > = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            customsDeclaration: components.CustomsDeclaration$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.customsDeclaration === undefined
                    ? null
                    : { CustomsDeclaration: v.customsDeclaration }),
            };
        });
}
