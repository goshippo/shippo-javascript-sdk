/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";

export type GetUserParcelTemplateGlobals = {
  /**
   * Optional string used to pick a non-default API version to use. See our <a href="https://docs.goshippo.com/docs/api_concepts/apiversioning/">API version</a> guide.
   */
  shippoApiVersion?: string | undefined;
};

export type GetUserParcelTemplateRequest = {
  /**
   * Object ID of the user parcel template
   */
  userParcelTemplateObjectId: string;
};

/** @internal */
export const GetUserParcelTemplateGlobals$inboundSchema: z.ZodType<
  GetUserParcelTemplateGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "SHIPPO-API-VERSION": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "SHIPPO-API-VERSION": "shippoApiVersion",
  });
});

/** @internal */
export type GetUserParcelTemplateGlobals$Outbound = {
  "SHIPPO-API-VERSION"?: string | undefined;
};

/** @internal */
export const GetUserParcelTemplateGlobals$outboundSchema: z.ZodType<
  GetUserParcelTemplateGlobals$Outbound,
  z.ZodTypeDef,
  GetUserParcelTemplateGlobals
> = z.object({
  shippoApiVersion: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    shippoApiVersion: "SHIPPO-API-VERSION",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetUserParcelTemplateGlobals$ {
  /** @deprecated use `GetUserParcelTemplateGlobals$inboundSchema` instead. */
  export const inboundSchema = GetUserParcelTemplateGlobals$inboundSchema;
  /** @deprecated use `GetUserParcelTemplateGlobals$outboundSchema` instead. */
  export const outboundSchema = GetUserParcelTemplateGlobals$outboundSchema;
  /** @deprecated use `GetUserParcelTemplateGlobals$Outbound` instead. */
  export type Outbound = GetUserParcelTemplateGlobals$Outbound;
}

/** @internal */
export const GetUserParcelTemplateRequest$inboundSchema: z.ZodType<
  GetUserParcelTemplateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  UserParcelTemplateObjectId: z.string(),
}).transform((v) => {
  return remap$(v, {
    "UserParcelTemplateObjectId": "userParcelTemplateObjectId",
  });
});

/** @internal */
export type GetUserParcelTemplateRequest$Outbound = {
  UserParcelTemplateObjectId: string;
};

/** @internal */
export const GetUserParcelTemplateRequest$outboundSchema: z.ZodType<
  GetUserParcelTemplateRequest$Outbound,
  z.ZodTypeDef,
  GetUserParcelTemplateRequest
> = z.object({
  userParcelTemplateObjectId: z.string(),
}).transform((v) => {
  return remap$(v, {
    userParcelTemplateObjectId: "UserParcelTemplateObjectId",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetUserParcelTemplateRequest$ {
  /** @deprecated use `GetUserParcelTemplateRequest$inboundSchema` instead. */
  export const inboundSchema = GetUserParcelTemplateRequest$inboundSchema;
  /** @deprecated use `GetUserParcelTemplateRequest$outboundSchema` instead. */
  export const outboundSchema = GetUserParcelTemplateRequest$outboundSchema;
  /** @deprecated use `GetUserParcelTemplateRequest$Outbound` instead. */
  export type Outbound = GetUserParcelTemplateRequest$Outbound;
}
