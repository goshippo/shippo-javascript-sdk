/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

/**
 * Examples.
 */
export type CreateTransactionRequestBody =
    | components.TransactionCreateRequest
    | components.InstantTransactionRequestBody;

export type CreateTransactionRequest = {
    /**
     * String used to pick a non-default API version to use
     */
    shippoApiVersion?: string | undefined;
    /**
     * Examples.
     */
    requestBody?:
        | components.TransactionCreateRequest
        | components.InstantTransactionRequestBody
        | undefined;
};

export type CreateTransactionResponse = {
    httpMeta: components.HTTPMetadata;
    transaction?: components.Transaction | undefined;
};

/** @internal */
export namespace CreateTransactionRequestBody$ {
    export type Inbound =
        | components.TransactionCreateRequest$.Inbound
        | components.InstantTransactionRequestBody$.Inbound;

    export type Outbound =
        | components.TransactionCreateRequest$.Outbound
        | components.InstantTransactionRequestBody$.Outbound;
    export const inboundSchema: z.ZodType<CreateTransactionRequestBody, z.ZodTypeDef, Inbound> =
        z.union([
            components.TransactionCreateRequest$.inboundSchema,
            components.InstantTransactionRequestBody$.inboundSchema,
        ]);
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateTransactionRequestBody> =
        z.union([
            components.TransactionCreateRequest$.outboundSchema,
            components.InstantTransactionRequestBody$.outboundSchema,
        ]);
}

/** @internal */
export namespace CreateTransactionRequest$ {
    export type Inbound = {
        "SHIPPO-API-VERSION"?: string | undefined;
        RequestBody?:
            | components.TransactionCreateRequest$.Inbound
            | components.InstantTransactionRequestBody$.Inbound
            | undefined;
    };

    export const inboundSchema: z.ZodType<CreateTransactionRequest, z.ZodTypeDef, Inbound> = z
        .object({
            "SHIPPO-API-VERSION": z.string().optional(),
            RequestBody: z
                .union([
                    components.TransactionCreateRequest$.inboundSchema,
                    components.InstantTransactionRequestBody$.inboundSchema,
                ])
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v["SHIPPO-API-VERSION"] === undefined
                    ? null
                    : { shippoApiVersion: v["SHIPPO-API-VERSION"] }),
                ...(v.RequestBody === undefined ? null : { requestBody: v.RequestBody }),
            };
        });

    export type Outbound = {
        "SHIPPO-API-VERSION"?: string | undefined;
        RequestBody?:
            | components.TransactionCreateRequest$.Outbound
            | components.InstantTransactionRequestBody$.Outbound
            | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateTransactionRequest> = z
        .object({
            shippoApiVersion: z.string().optional(),
            requestBody: z
                .union([
                    components.TransactionCreateRequest$.outboundSchema,
                    components.InstantTransactionRequestBody$.outboundSchema,
                ])
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.shippoApiVersion === undefined
                    ? null
                    : { "SHIPPO-API-VERSION": v.shippoApiVersion }),
                ...(v.requestBody === undefined ? null : { RequestBody: v.requestBody }),
            };
        });
}

/** @internal */
export namespace CreateTransactionResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
        Transaction?: components.Transaction$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<CreateTransactionResponse, z.ZodTypeDef, Inbound> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            Transaction: components.Transaction$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.Transaction === undefined ? null : { transaction: v.Transaction }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        Transaction?: components.Transaction$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateTransactionResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            transaction: components.Transaction$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.transaction === undefined ? null : { Transaction: v.transaction }),
            };
        });
}
