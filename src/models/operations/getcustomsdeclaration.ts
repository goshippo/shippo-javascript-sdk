/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetCustomsDeclarationGlobals = {
  /**
   * Optional string used to pick a non-default API version to use. See our <a href="https://docs.goshippo.com/docs/api_concepts/apiversioning/">API version</a> guide.
   */
  shippoApiVersion?: string | undefined;
};

export type GetCustomsDeclarationRequest = {
  /**
   * Object ID of the customs declaration
   */
  customsDeclarationId: string;
  /**
   * The page number you want to select
   */
  page?: number | undefined;
};

/** @internal */
export const GetCustomsDeclarationGlobals$inboundSchema: z.ZodType<
  GetCustomsDeclarationGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "SHIPPO-API-VERSION": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "SHIPPO-API-VERSION": "shippoApiVersion",
  });
});

/** @internal */
export type GetCustomsDeclarationGlobals$Outbound = {
  "SHIPPO-API-VERSION"?: string | undefined;
};

/** @internal */
export const GetCustomsDeclarationGlobals$outboundSchema: z.ZodType<
  GetCustomsDeclarationGlobals$Outbound,
  z.ZodTypeDef,
  GetCustomsDeclarationGlobals
> = z.object({
  shippoApiVersion: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    shippoApiVersion: "SHIPPO-API-VERSION",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCustomsDeclarationGlobals$ {
  /** @deprecated use `GetCustomsDeclarationGlobals$inboundSchema` instead. */
  export const inboundSchema = GetCustomsDeclarationGlobals$inboundSchema;
  /** @deprecated use `GetCustomsDeclarationGlobals$outboundSchema` instead. */
  export const outboundSchema = GetCustomsDeclarationGlobals$outboundSchema;
  /** @deprecated use `GetCustomsDeclarationGlobals$Outbound` instead. */
  export type Outbound = GetCustomsDeclarationGlobals$Outbound;
}

export function getCustomsDeclarationGlobalsToJSON(
  getCustomsDeclarationGlobals: GetCustomsDeclarationGlobals,
): string {
  return JSON.stringify(
    GetCustomsDeclarationGlobals$outboundSchema.parse(
      getCustomsDeclarationGlobals,
    ),
  );
}

export function getCustomsDeclarationGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<GetCustomsDeclarationGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCustomsDeclarationGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCustomsDeclarationGlobals' from JSON`,
  );
}

/** @internal */
export const GetCustomsDeclarationRequest$inboundSchema: z.ZodType<
  GetCustomsDeclarationRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  CustomsDeclarationId: z.string(),
  page: z.number().int().default(1),
}).transform((v) => {
  return remap$(v, {
    "CustomsDeclarationId": "customsDeclarationId",
  });
});

/** @internal */
export type GetCustomsDeclarationRequest$Outbound = {
  CustomsDeclarationId: string;
  page: number;
};

/** @internal */
export const GetCustomsDeclarationRequest$outboundSchema: z.ZodType<
  GetCustomsDeclarationRequest$Outbound,
  z.ZodTypeDef,
  GetCustomsDeclarationRequest
> = z.object({
  customsDeclarationId: z.string(),
  page: z.number().int().default(1),
}).transform((v) => {
  return remap$(v, {
    customsDeclarationId: "CustomsDeclarationId",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCustomsDeclarationRequest$ {
  /** @deprecated use `GetCustomsDeclarationRequest$inboundSchema` instead. */
  export const inboundSchema = GetCustomsDeclarationRequest$inboundSchema;
  /** @deprecated use `GetCustomsDeclarationRequest$outboundSchema` instead. */
  export const outboundSchema = GetCustomsDeclarationRequest$outboundSchema;
  /** @deprecated use `GetCustomsDeclarationRequest$Outbound` instead. */
  export type Outbound = GetCustomsDeclarationRequest$Outbound;
}

export function getCustomsDeclarationRequestToJSON(
  getCustomsDeclarationRequest: GetCustomsDeclarationRequest,
): string {
  return JSON.stringify(
    GetCustomsDeclarationRequest$outboundSchema.parse(
      getCustomsDeclarationRequest,
    ),
  );
}

export function getCustomsDeclarationRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetCustomsDeclarationRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCustomsDeclarationRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCustomsDeclarationRequest' from JSON`,
  );
}
