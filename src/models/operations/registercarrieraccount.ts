/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RegisterCarrierAccountGlobals = {
  /**
   * Optional string used to pick a non-default API version to use. See our <a href="https://docs.goshippo.com/docs/api_concepts/apiversioning/">API version</a> guide.
   */
  shippoApiVersion?: string | undefined;
};

/**
 * The body of the request.
 */
export type RegisterCarrierAccountRequestBody =
  | (components.CarrierAccountCanadaPostCreateRequest & {
    carrier: "canada_post";
  })
  | (components.CarrierAccountChronopostCreateRequest & {
    carrier: "chronopost";
  })
  | (components.CarrierAccountColissimoCreateRequest & { carrier: "colissimo" })
  | (components.CarrierAccountCorreosCreateRequest & { carrier: "correos" })
  | (components.CarrierAccountDeutschePostCreateRequest & {
    carrier: "deutsche_post";
  })
  | (components.CarrierAccountDHLExpressCreateRequest & {
    carrier: "dhl_express";
  })
  | (components.CarrierAccountDpdDeCreateRequest & { carrier: "dpd_de" })
  | (components.CarrierAccountDPDUKCreateRequest & { carrier: "dpd_uk" })
  | (components.CarrierAccountFedExCreateRequest & { carrier: "fedex" })
  | (components.CarrierAccountHermesUKCreateRequest & { carrier: "hermes_uk" })
  | (components.CarrierAccountMondialRelayCreateRequest & {
    carrier: "mondial_relay";
  })
  | (components.CarrierAccountPosteItalianeCreateRequest & {
    carrier: "poste_italiane";
  })
  | (components.CarrierAccountUPSCreateRequest & { carrier: "ups" })
  | (components.CarrierAccountUSPSCreateRequest & { carrier: "usps" })
  | (components.CarrierAccountSendleCreateRequest & { carrier: "sendle" });

/** @internal */
export const RegisterCarrierAccountGlobals$inboundSchema: z.ZodType<
  RegisterCarrierAccountGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "SHIPPO-API-VERSION": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "SHIPPO-API-VERSION": "shippoApiVersion",
  });
});

/** @internal */
export type RegisterCarrierAccountGlobals$Outbound = {
  "SHIPPO-API-VERSION"?: string | undefined;
};

/** @internal */
export const RegisterCarrierAccountGlobals$outboundSchema: z.ZodType<
  RegisterCarrierAccountGlobals$Outbound,
  z.ZodTypeDef,
  RegisterCarrierAccountGlobals
> = z.object({
  shippoApiVersion: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    shippoApiVersion: "SHIPPO-API-VERSION",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RegisterCarrierAccountGlobals$ {
  /** @deprecated use `RegisterCarrierAccountGlobals$inboundSchema` instead. */
  export const inboundSchema = RegisterCarrierAccountGlobals$inboundSchema;
  /** @deprecated use `RegisterCarrierAccountGlobals$outboundSchema` instead. */
  export const outboundSchema = RegisterCarrierAccountGlobals$outboundSchema;
  /** @deprecated use `RegisterCarrierAccountGlobals$Outbound` instead. */
  export type Outbound = RegisterCarrierAccountGlobals$Outbound;
}

export function registerCarrierAccountGlobalsToJSON(
  registerCarrierAccountGlobals: RegisterCarrierAccountGlobals,
): string {
  return JSON.stringify(
    RegisterCarrierAccountGlobals$outboundSchema.parse(
      registerCarrierAccountGlobals,
    ),
  );
}

export function registerCarrierAccountGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<RegisterCarrierAccountGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RegisterCarrierAccountGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RegisterCarrierAccountGlobals' from JSON`,
  );
}

/** @internal */
export const RegisterCarrierAccountRequestBody$inboundSchema: z.ZodType<
  RegisterCarrierAccountRequestBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  components.CarrierAccountCanadaPostCreateRequest$inboundSchema.and(
    z.object({ carrier: z.literal("canada_post") }).transform((v) => ({
      carrier: v.carrier,
    })),
  ),
  components.CarrierAccountChronopostCreateRequest$inboundSchema.and(
    z.object({ carrier: z.literal("chronopost") }).transform((v) => ({
      carrier: v.carrier,
    })),
  ),
  components.CarrierAccountColissimoCreateRequest$inboundSchema.and(
    z.object({ carrier: z.literal("colissimo") }).transform((v) => ({
      carrier: v.carrier,
    })),
  ),
  components.CarrierAccountCorreosCreateRequest$inboundSchema.and(
    z.object({ carrier: z.literal("correos") }).transform((v) => ({
      carrier: v.carrier,
    })),
  ),
  components.CarrierAccountDeutschePostCreateRequest$inboundSchema.and(
    z.object({ carrier: z.literal("deutsche_post") }).transform((v) => ({
      carrier: v.carrier,
    })),
  ),
  components.CarrierAccountDHLExpressCreateRequest$inboundSchema.and(
    z.object({ carrier: z.literal("dhl_express") }).transform((v) => ({
      carrier: v.carrier,
    })),
  ),
  components.CarrierAccountDpdDeCreateRequest$inboundSchema.and(
    z.object({ carrier: z.literal("dpd_de") }).transform((v) => ({
      carrier: v.carrier,
    })),
  ),
  components.CarrierAccountDPDUKCreateRequest$inboundSchema.and(
    z.object({ carrier: z.literal("dpd_uk") }).transform((v) => ({
      carrier: v.carrier,
    })),
  ),
  components.CarrierAccountFedExCreateRequest$inboundSchema.and(
    z.object({ carrier: z.literal("fedex") }).transform((v) => ({
      carrier: v.carrier,
    })),
  ),
  components.CarrierAccountHermesUKCreateRequest$inboundSchema.and(
    z.object({ carrier: z.literal("hermes_uk") }).transform((v) => ({
      carrier: v.carrier,
    })),
  ),
  components.CarrierAccountMondialRelayCreateRequest$inboundSchema.and(
    z.object({ carrier: z.literal("mondial_relay") }).transform((v) => ({
      carrier: v.carrier,
    })),
  ),
  components.CarrierAccountPosteItalianeCreateRequest$inboundSchema.and(
    z.object({ carrier: z.literal("poste_italiane") }).transform((v) => ({
      carrier: v.carrier,
    })),
  ),
  components.CarrierAccountUPSCreateRequest$inboundSchema.and(
    z.object({ carrier: z.literal("ups") }).transform((v) => ({
      carrier: v.carrier,
    })),
  ),
  components.CarrierAccountUSPSCreateRequest$inboundSchema.and(
    z.object({ carrier: z.literal("usps") }).transform((v) => ({
      carrier: v.carrier,
    })),
  ),
  components.CarrierAccountSendleCreateRequest$inboundSchema.and(
    z.object({ carrier: z.literal("sendle") }).transform((v) => ({
      carrier: v.carrier,
    })),
  ),
]);

/** @internal */
export type RegisterCarrierAccountRequestBody$Outbound =
  | (components.CarrierAccountCanadaPostCreateRequest$Outbound & {
    carrier: "canada_post";
  })
  | (components.CarrierAccountChronopostCreateRequest$Outbound & {
    carrier: "chronopost";
  })
  | (components.CarrierAccountColissimoCreateRequest$Outbound & {
    carrier: "colissimo";
  })
  | (components.CarrierAccountCorreosCreateRequest$Outbound & {
    carrier: "correos";
  })
  | (components.CarrierAccountDeutschePostCreateRequest$Outbound & {
    carrier: "deutsche_post";
  })
  | (components.CarrierAccountDHLExpressCreateRequest$Outbound & {
    carrier: "dhl_express";
  })
  | (components.CarrierAccountDpdDeCreateRequest$Outbound & {
    carrier: "dpd_de";
  })
  | (components.CarrierAccountDPDUKCreateRequest$Outbound & {
    carrier: "dpd_uk";
  })
  | (components.CarrierAccountFedExCreateRequest$Outbound & {
    carrier: "fedex";
  })
  | (components.CarrierAccountHermesUKCreateRequest$Outbound & {
    carrier: "hermes_uk";
  })
  | (components.CarrierAccountMondialRelayCreateRequest$Outbound & {
    carrier: "mondial_relay";
  })
  | (components.CarrierAccountPosteItalianeCreateRequest$Outbound & {
    carrier: "poste_italiane";
  })
  | (components.CarrierAccountUPSCreateRequest$Outbound & { carrier: "ups" })
  | (components.CarrierAccountUSPSCreateRequest$Outbound & { carrier: "usps" })
  | (components.CarrierAccountSendleCreateRequest$Outbound & {
    carrier: "sendle";
  });

/** @internal */
export const RegisterCarrierAccountRequestBody$outboundSchema: z.ZodType<
  RegisterCarrierAccountRequestBody$Outbound,
  z.ZodTypeDef,
  RegisterCarrierAccountRequestBody
> = z.union([
  components.CarrierAccountCanadaPostCreateRequest$outboundSchema.and(
    z.object({ carrier: z.literal("canada_post") }).transform((v) => ({
      carrier: v.carrier,
    })),
  ),
  components.CarrierAccountChronopostCreateRequest$outboundSchema.and(
    z.object({ carrier: z.literal("chronopost") }).transform((v) => ({
      carrier: v.carrier,
    })),
  ),
  components.CarrierAccountColissimoCreateRequest$outboundSchema.and(
    z.object({ carrier: z.literal("colissimo") }).transform((v) => ({
      carrier: v.carrier,
    })),
  ),
  components.CarrierAccountCorreosCreateRequest$outboundSchema.and(
    z.object({ carrier: z.literal("correos") }).transform((v) => ({
      carrier: v.carrier,
    })),
  ),
  components.CarrierAccountDeutschePostCreateRequest$outboundSchema.and(
    z.object({ carrier: z.literal("deutsche_post") }).transform((v) => ({
      carrier: v.carrier,
    })),
  ),
  components.CarrierAccountDHLExpressCreateRequest$outboundSchema.and(
    z.object({ carrier: z.literal("dhl_express") }).transform((v) => ({
      carrier: v.carrier,
    })),
  ),
  components.CarrierAccountDpdDeCreateRequest$outboundSchema.and(
    z.object({ carrier: z.literal("dpd_de") }).transform((v) => ({
      carrier: v.carrier,
    })),
  ),
  components.CarrierAccountDPDUKCreateRequest$outboundSchema.and(
    z.object({ carrier: z.literal("dpd_uk") }).transform((v) => ({
      carrier: v.carrier,
    })),
  ),
  components.CarrierAccountFedExCreateRequest$outboundSchema.and(
    z.object({ carrier: z.literal("fedex") }).transform((v) => ({
      carrier: v.carrier,
    })),
  ),
  components.CarrierAccountHermesUKCreateRequest$outboundSchema.and(
    z.object({ carrier: z.literal("hermes_uk") }).transform((v) => ({
      carrier: v.carrier,
    })),
  ),
  components.CarrierAccountMondialRelayCreateRequest$outboundSchema.and(
    z.object({ carrier: z.literal("mondial_relay") }).transform((v) => ({
      carrier: v.carrier,
    })),
  ),
  components.CarrierAccountPosteItalianeCreateRequest$outboundSchema.and(
    z.object({ carrier: z.literal("poste_italiane") }).transform((v) => ({
      carrier: v.carrier,
    })),
  ),
  components.CarrierAccountUPSCreateRequest$outboundSchema.and(
    z.object({ carrier: z.literal("ups") }).transform((v) => ({
      carrier: v.carrier,
    })),
  ),
  components.CarrierAccountUSPSCreateRequest$outboundSchema.and(
    z.object({ carrier: z.literal("usps") }).transform((v) => ({
      carrier: v.carrier,
    })),
  ),
  components.CarrierAccountSendleCreateRequest$outboundSchema.and(
    z.object({ carrier: z.literal("sendle") }).transform((v) => ({
      carrier: v.carrier,
    })),
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RegisterCarrierAccountRequestBody$ {
  /** @deprecated use `RegisterCarrierAccountRequestBody$inboundSchema` instead. */
  export const inboundSchema = RegisterCarrierAccountRequestBody$inboundSchema;
  /** @deprecated use `RegisterCarrierAccountRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    RegisterCarrierAccountRequestBody$outboundSchema;
  /** @deprecated use `RegisterCarrierAccountRequestBody$Outbound` instead. */
  export type Outbound = RegisterCarrierAccountRequestBody$Outbound;
}

export function registerCarrierAccountRequestBodyToJSON(
  registerCarrierAccountRequestBody: RegisterCarrierAccountRequestBody,
): string {
  return JSON.stringify(
    RegisterCarrierAccountRequestBody$outboundSchema.parse(
      registerCarrierAccountRequestBody,
    ),
  );
}

export function registerCarrierAccountRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<RegisterCarrierAccountRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RegisterCarrierAccountRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RegisterCarrierAccountRequestBody' from JSON`,
  );
}
