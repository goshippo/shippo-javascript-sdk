/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { refundsCreate } from "../funcs/refundsCreate.js";
import { refundsGet } from "../funcs/refundsGet.js";
import { refundsList } from "../funcs/refundsList.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Refunds extends ClientSDK {
  /**
   * Create a refund
   *
   * @remarks
   * Creates a new refund object.
   */
  async create(
    transaction: string,
    async?: boolean | undefined,
    options?: RequestOptions,
  ): Promise<components.Refund> {
    return unwrapAsync(refundsCreate(
      this,
      transaction,
      async,
      options,
    ));
  }

  /**
   * List all refunds
   *
   * @remarks
   * Returns a list all refund objects.
   */
  async list(
    options?: RequestOptions,
  ): Promise<components.RefundPaginatedList> {
    return unwrapAsync(refundsList(
      this,
      options,
    ));
  }

  /**
   * Retrieve a refund
   *
   * @remarks
   * Returns an existing rate using a rate object ID.
   */
  async get(
    refundId: string,
    options?: RequestOptions,
  ): Promise<components.Refund> {
    return unwrapAsync(refundsGet(
      this,
      refundId,
      options,
    ));
  }
}
