/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDKHooks } from "../hooks/hooks.js";
import { SDKOptions, serverURLFromOptions } from "../lib/config.js";
import {
    encodeFormQuery as encodeFormQuery$,
    encodeJSON as encodeJSON$,
    encodeSimple as encodeSimple$,
} from "../lib/encodings.js";
import { HTTPClient } from "../lib/http.js";
import * as schemas$ from "../lib/schemas.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";

export class Shipments extends ClientSDK {
    private readonly options$: SDKOptions & { hooks?: SDKHooks };

    constructor(options: SDKOptions = {}) {
        const opt = options as unknown;
        let hooks: SDKHooks;
        if (
            typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof SDKHooks
        ) {
            hooks = opt.hooks;
        } else {
            hooks = new SDKHooks();
        }

        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
            hooks,
        });

        this.options$ = { ...options, hooks };
        void this.options$;
    }

    /**
     * List all shipments
     *
     * @remarks
     * Returns a list of all shipment objects.<br><br>
     * In order to filter results, you must use the below path parameters.
     * A maximum date range of 90 days is permitted.
     * Provided dates should be ISO 8601 UTC dates (timezone offsets are currently not supported).<br><br>
     *
     * Optional path parameters:<br>
     *   `object_created_gt`- object(s) created greater than a provided date time<br>
     *   `object_created_gte` - object(s) created greater than or equal to a provided date time<br>
     *   `object_created_lt` - object(s) created less than a provided date time<br>
     *   `object_created_lte` - object(s) created less than or equal to a provided date time<br>
     *
     *   Date format examples:<br>
     *     `2017-01-01`<br>
     *     `2017-01-01T03:30:30` or `2017-01-01T03:30:30.5`<br>
     *     `2017-01-01T03:30:30Z`<br><br>
     *
     *   Example URL:<br>
     *     `https://api.goshippo.com/shipments/?object_created_gte=2017-01-01T00:00:30&object_created_lt=2017-04-01T00:00:30`
     */
    async list(
        request: operations.ListShipmentsRequest,
        options?: RequestOptions
    ): Promise<components.ShipmentPaginatedList> {
        const input$ = typeof request === "undefined" ? {} : request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.ListShipmentsRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const path$ = this.templateURLComponent("/shipments")();

        const query$ = encodeFormQuery$({
            object_created_gt: payload$.object_created_gt,
            object_created_gte: payload$.object_created_gte,
            object_created_lt: payload$.object_created_lt,
            object_created_lte: payload$.object_created_lte,
            page: payload$.page,
            results: payload$.results,
        });

        const headers$ = new Headers({
            Accept: "application/json",
            "SHIPPO-API-VERSION": encodeSimple$(
                "SHIPPO-API-VERSION",
                this.options$.shippoApiVersion,
                { explode: false, charEncoding: "none" }
            ),
        });

        let security$;
        if (typeof this.options$.apiKeyHeader === "function") {
            security$ = { apiKeyHeader: await this.options$.apiKeyHeader() };
        } else if (this.options$.apiKeyHeader) {
            security$ = { apiKeyHeader: this.options$.apiKeyHeader };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "ListShipments",
            oAuth2Scopes: [],
            securitySource: this.options$.apiKeyHeader,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, { context, errorCodes: ["400", "4XX", "5XX"] });

        const [result$] = await this.matcher<components.ShipmentPaginatedList>()
            .json(200, components.ShipmentPaginatedList$)
            .fail([400, "4XX", "5XX"])
            .match(response);

        return result$;
    }

    /**
     * Create a new shipment
     *
     * @remarks
     * Creates a new shipment object.
     */
    async create(
        request: components.ShipmentCreateRequest,
        options?: RequestOptions
    ): Promise<components.Shipment> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => components.ShipmentCreateRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = encodeJSON$("body", payload$, { explode: true });

        const path$ = this.templateURLComponent("/shipments")();

        const query$ = "";

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
            "SHIPPO-API-VERSION": encodeSimple$(
                "SHIPPO-API-VERSION",
                this.options$.shippoApiVersion,
                { explode: false, charEncoding: "none" }
            ),
        });

        let security$;
        if (typeof this.options$.apiKeyHeader === "function") {
            security$ = { apiKeyHeader: await this.options$.apiKeyHeader() };
        } else if (this.options$.apiKeyHeader) {
            security$ = { apiKeyHeader: this.options$.apiKeyHeader };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "CreateShipment",
            oAuth2Scopes: [],
            securitySource: this.options$.apiKeyHeader,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, { context, errorCodes: ["400", "4XX", "5XX"] });

        const [result$] = await this.matcher<components.Shipment>()
            .json(201, components.Shipment$)
            .fail([400, "4XX", "5XX"])
            .match(response);

        return result$;
    }

    /**
     * Retrieve a shipment
     *
     * @remarks
     * Returns an existing shipment using an object ID
     */
    async get(shipmentId: string, options?: RequestOptions): Promise<components.Shipment> {
        const input$: operations.GetShipmentRequest = {
            shipmentId: shipmentId,
        };

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.GetShipmentRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            ShipmentId: encodeSimple$("ShipmentId", payload$.ShipmentId, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/shipments/{ShipmentId}")(pathParams$);

        const query$ = "";

        const headers$ = new Headers({
            Accept: "application/json",
            "SHIPPO-API-VERSION": encodeSimple$(
                "SHIPPO-API-VERSION",
                this.options$.shippoApiVersion,
                { explode: false, charEncoding: "none" }
            ),
        });

        let security$;
        if (typeof this.options$.apiKeyHeader === "function") {
            security$ = { apiKeyHeader: await this.options$.apiKeyHeader() };
        } else if (this.options$.apiKeyHeader) {
            security$ = { apiKeyHeader: this.options$.apiKeyHeader };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "GetShipment",
            oAuth2Scopes: [],
            securitySource: this.options$.apiKeyHeader,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, { context, errorCodes: ["400", "4XX", "5XX"] });

        const [result$] = await this.matcher<components.Shipment>()
            .json(200, components.Shipment$)
            .fail([400, "4XX", "5XX"])
            .match(response);

        return result$;
    }
}
