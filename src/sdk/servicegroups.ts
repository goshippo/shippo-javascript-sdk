/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDKHooks } from "../hooks/hooks.js";
import { SDKOptions, serverURLFromOptions } from "../lib/config.js";
import { encodeJSON as encodeJSON$, encodeSimple as encodeSimple$ } from "../lib/encodings.js";
import { HTTPClient } from "../lib/http.js";
import * as schemas$ from "../lib/schemas.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import * as z from "zod";

export class ServiceGroups extends ClientSDK {
    private readonly options$: SDKOptions & { hooks?: SDKHooks };

    constructor(options: SDKOptions = {}) {
        const opt = options as unknown;
        let hooks: SDKHooks;
        if (
            typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof SDKHooks
        ) {
            hooks = opt.hooks;
        } else {
            hooks = new SDKHooks();
        }

        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
            hooks,
        });

        this.options$ = { ...options, hooks };
        void this.options$;
    }

    /**
     * List all service groups
     *
     * @remarks
     * Returns a list of service group objects.
     */
    async list(options?: RequestOptions): Promise<Array<components.ServiceGroup>> {
        const input$: operations.ListServiceGroupsRequest = {};
        void input$; // request input is unused

        const path$ = this.templateURLComponent("/service-groups")();

        const query$ = "";

        const headers$ = new Headers({
            Accept: "application/json",
            "SHIPPO-API-VERSION": encodeSimple$(
                "SHIPPO-API-VERSION",
                this.options$.shippoApiVersion,
                { explode: false, charEncoding: "none" }
            ),
        });

        let security$;
        if (typeof this.options$.apiKeyHeader === "function") {
            security$ = { apiKeyHeader: await this.options$.apiKeyHeader() };
        } else if (this.options$.apiKeyHeader) {
            security$ = { apiKeyHeader: this.options$.apiKeyHeader };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "ListServiceGroups",
            oAuth2Scopes: [],
            securitySource: this.options$.apiKeyHeader,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
            },
            options
        );

        const response = await this.do$(request$, { context, errorCodes: ["400", "4XX", "5XX"] });

        const [result$] = await this.matcher<Array<components.ServiceGroup>>()
            .json(200, z.array(components.ServiceGroup$.inboundSchema))
            .fail([400, "4XX", "5XX"])
            .match(response);

        return result$;
    }

    /**
     * Create a new service group
     *
     * @remarks
     * Creates a new service group.
     */
    async create(
        request: components.ServiceGroupCreateRequest,
        options?: RequestOptions
    ): Promise<components.ServiceGroup> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => components.ServiceGroupCreateRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = encodeJSON$("body", payload$, { explode: true });

        const path$ = this.templateURLComponent("/service-groups")();

        const query$ = "";

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
            "SHIPPO-API-VERSION": encodeSimple$(
                "SHIPPO-API-VERSION",
                this.options$.shippoApiVersion,
                { explode: false, charEncoding: "none" }
            ),
        });

        let security$;
        if (typeof this.options$.apiKeyHeader === "function") {
            security$ = { apiKeyHeader: await this.options$.apiKeyHeader() };
        } else if (this.options$.apiKeyHeader) {
            security$ = { apiKeyHeader: this.options$.apiKeyHeader };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "CreateServiceGroup",
            oAuth2Scopes: [],
            securitySource: this.options$.apiKeyHeader,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, { context, errorCodes: ["400", "4XX", "5XX"] });

        const [result$] = await this.matcher<components.ServiceGroup>()
            .json(201, components.ServiceGroup$)
            .fail([400, "4XX", "5XX"])
            .match(response);

        return result$;
    }

    /**
     * Update an existing service group
     *
     * @remarks
     * Updates an existing service group object. <br>The object_id cannot be updated as it is the unique identifier for the object.
     */
    async update(
        request?: components.ServiceGroupUpdateRequest | undefined,
        options?: RequestOptions
    ): Promise<components.ServiceGroup> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) =>
                components.ServiceGroupUpdateRequest$.outboundSchema.optional().parse(value$),
            "Input validation failed"
        );
        const body$ =
            payload$ === undefined ? null : encodeJSON$("body", payload$, { explode: true });

        const path$ = this.templateURLComponent("/service-groups")();

        const query$ = "";

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
            "SHIPPO-API-VERSION": encodeSimple$(
                "SHIPPO-API-VERSION",
                this.options$.shippoApiVersion,
                { explode: false, charEncoding: "none" }
            ),
        });

        let security$;
        if (typeof this.options$.apiKeyHeader === "function") {
            security$ = { apiKeyHeader: await this.options$.apiKeyHeader() };
        } else if (this.options$.apiKeyHeader) {
            security$ = { apiKeyHeader: this.options$.apiKeyHeader };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "UpdateServiceGroup",
            oAuth2Scopes: [],
            securitySource: this.options$.apiKeyHeader,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "PUT",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, { context, errorCodes: ["400", "4XX", "5XX"] });

        const [result$] = await this.matcher<components.ServiceGroup>()
            .json(200, components.ServiceGroup$)
            .fail([400, "4XX", "5XX"])
            .match(response);

        return result$;
    }

    /**
     * Delete a service group
     *
     * @remarks
     * Deletes an existing service group using an object ID.
     */
    async delete(serviceGroupId: string, options?: RequestOptions): Promise<void> {
        const input$: operations.DeleteServiceGroupRequest = {
            serviceGroupId: serviceGroupId,
        };

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.DeleteServiceGroupRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            ServiceGroupId: encodeSimple$("ServiceGroupId", payload$.ServiceGroupId, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/service-groups/{ServiceGroupId}")(pathParams$);

        const query$ = "";

        const headers$ = new Headers({
            Accept: "*/*",
            "SHIPPO-API-VERSION": encodeSimple$(
                "SHIPPO-API-VERSION",
                this.options$.shippoApiVersion,
                { explode: false, charEncoding: "none" }
            ),
        });

        let security$;
        if (typeof this.options$.apiKeyHeader === "function") {
            security$ = { apiKeyHeader: await this.options$.apiKeyHeader() };
        } else if (this.options$.apiKeyHeader) {
            security$ = { apiKeyHeader: this.options$.apiKeyHeader };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "DeleteServiceGroup",
            oAuth2Scopes: [],
            securitySource: this.options$.apiKeyHeader,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "DELETE",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, { context, errorCodes: ["400", "4XX", "5XX"] });

        const [result$] = await this.matcher<void>()
            .void(204, z.void())
            .fail([400, "4XX", "5XX"])
            .match(response);

        return result$;
    }
}
