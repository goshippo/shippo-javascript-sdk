/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDKHooks } from "../hooks/hooks.js";
import { SDKOptions, serverURLFromOptions } from "../lib/config.js";
import {
    encodeFormQuery as encodeFormQuery$,
    encodeJSON as encodeJSON$,
    encodeSimple as encodeSimple$,
} from "../lib/encodings.js";
import { HTTPClient } from "../lib/http.js";
import * as schemas$ from "../lib/schemas.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";

export class CustomsDeclarations extends ClientSDK {
    private readonly options$: SDKOptions & { hooks?: SDKHooks };

    constructor(options: SDKOptions = {}) {
        const opt = options as unknown;
        let hooks: SDKHooks;
        if (
            typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof SDKHooks
        ) {
            hooks = opt.hooks;
        } else {
            hooks = new SDKHooks();
        }

        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
            hooks,
        });

        this.options$ = { ...options, hooks };
        void this.options$;
    }

    /**
     * List all customs declarations
     *
     * @remarks
     * Returns a a list of all customs declaration objects
     */
    async list(
        page?: number | undefined,
        results?: number | undefined,
        options?: RequestOptions
    ): Promise<components.CustomsDeclarationPaginatedList> {
        const input$: operations.ListCustomsDeclarationsRequest = {
            page: page,
            results: results,
        };

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.ListCustomsDeclarationsRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const path$ = this.templateURLComponent("/customs/declarations")();

        const query$ = encodeFormQuery$({
            page: payload$.page,
            results: payload$.results,
        });

        const headers$ = new Headers({
            Accept: "application/json",
            "SHIPPO-API-VERSION": encodeSimple$(
                "SHIPPO-API-VERSION",
                this.options$.shippoApiVersion,
                { explode: false, charEncoding: "none" }
            ),
        });

        let security$;
        if (typeof this.options$.apiKeyHeader === "function") {
            security$ = { apiKeyHeader: await this.options$.apiKeyHeader() };
        } else if (this.options$.apiKeyHeader) {
            security$ = { apiKeyHeader: this.options$.apiKeyHeader };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "ListCustomsDeclarations",
            oAuth2Scopes: [],
            securitySource: this.options$.apiKeyHeader,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, { context, errorCodes: ["400", "4XX", "5XX"] });

        const [result$] = await this.matcher<components.CustomsDeclarationPaginatedList>()
            .json(200, components.CustomsDeclarationPaginatedList$)
            .fail([400, "4XX", "5XX"])
            .match(response);

        return result$;
    }

    /**
     * Create a new customs declaration
     *
     * @remarks
     * Creates a new customs declaration object
     */
    async create(
        request: components.CustomsDeclarationCreateRequest,
        options?: RequestOptions
    ): Promise<components.CustomsDeclaration> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => components.CustomsDeclarationCreateRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = encodeJSON$("body", payload$, { explode: true });

        const path$ = this.templateURLComponent("/customs/declarations")();

        const query$ = "";

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
            "SHIPPO-API-VERSION": encodeSimple$(
                "SHIPPO-API-VERSION",
                this.options$.shippoApiVersion,
                { explode: false, charEncoding: "none" }
            ),
        });

        let security$;
        if (typeof this.options$.apiKeyHeader === "function") {
            security$ = { apiKeyHeader: await this.options$.apiKeyHeader() };
        } else if (this.options$.apiKeyHeader) {
            security$ = { apiKeyHeader: this.options$.apiKeyHeader };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "CreateCustomsDeclaration",
            oAuth2Scopes: [],
            securitySource: this.options$.apiKeyHeader,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, { context, errorCodes: ["400", "4XX", "5XX"] });

        const [result$] = await this.matcher<components.CustomsDeclaration>()
            .json(201, components.CustomsDeclaration$)
            .fail([400, "4XX", "5XX"])
            .match(response);

        return result$;
    }

    /**
     * Retrieve a customs declaration
     *
     * @remarks
     * Returns an existing customs declaration using an object ID
     */
    async get(
        customsDeclarationId: string,
        page?: number | undefined,
        options?: RequestOptions
    ): Promise<components.CustomsDeclaration> {
        const input$: operations.GetCustomsDeclarationRequest = {
            customsDeclarationId: customsDeclarationId,
            page: page,
        };

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.GetCustomsDeclarationRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            CustomsDeclarationId: encodeSimple$(
                "CustomsDeclarationId",
                payload$.CustomsDeclarationId,
                { explode: false, charEncoding: "percent" }
            ),
        };
        const path$ = this.templateURLComponent("/customs/declarations/{CustomsDeclarationId}")(
            pathParams$
        );

        const query$ = encodeFormQuery$({
            page: payload$.page,
        });

        const headers$ = new Headers({
            Accept: "application/json",
            "SHIPPO-API-VERSION": encodeSimple$(
                "SHIPPO-API-VERSION",
                this.options$.shippoApiVersion,
                { explode: false, charEncoding: "none" }
            ),
        });

        let security$;
        if (typeof this.options$.apiKeyHeader === "function") {
            security$ = { apiKeyHeader: await this.options$.apiKeyHeader() };
        } else if (this.options$.apiKeyHeader) {
            security$ = { apiKeyHeader: this.options$.apiKeyHeader };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "GetCustomsDeclaration",
            oAuth2Scopes: [],
            securitySource: this.options$.apiKeyHeader,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, { context, errorCodes: ["400", "4XX", "5XX"] });

        const [result$] = await this.matcher<components.CustomsDeclaration>()
            .json(200, components.CustomsDeclaration$)
            .fail([400, "4XX", "5XX"])
            .match(response);

        return result$;
    }
}
