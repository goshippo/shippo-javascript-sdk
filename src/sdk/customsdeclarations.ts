/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { customsDeclarationsCreate } from "../funcs/customsDeclarationsCreate.js";
import { customsDeclarationsGet } from "../funcs/customsDeclarationsGet.js";
import { customsDeclarationsList } from "../funcs/customsDeclarationsList.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import { unwrapAsync } from "../types/fp.js";

export class CustomsDeclarations extends ClientSDK {
  /**
   * List all customs declarations
   *
   * @remarks
   * Returns a a list of all customs declaration objects
   */
  async list(
    page?: number | undefined,
    results?: number | undefined,
    options?: RequestOptions,
  ): Promise<components.CustomsDeclarationPaginatedList> {
    return unwrapAsync(customsDeclarationsList(
      this,
      page,
      results,
      options,
    ));
  }

  /**
   * Create a new customs declaration
   *
   * @remarks
   * Creates a new customs declaration object
   */
  async create(
    request: components.CustomsDeclarationCreateRequest,
    options?: RequestOptions,
  ): Promise<components.CustomsDeclaration> {
    return unwrapAsync(customsDeclarationsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a customs declaration
   *
   * @remarks
   * Returns an existing customs declaration using an object ID
   */
  async get(
    customsDeclarationId: string,
    page?: number | undefined,
    options?: RequestOptions,
  ): Promise<components.CustomsDeclaration> {
    return unwrapAsync(customsDeclarationsGet(
      this,
      customsDeclarationId,
      page,
      options,
    ));
  }
}
