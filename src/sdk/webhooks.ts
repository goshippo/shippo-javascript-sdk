/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDKHooks } from "../hooks/hooks.js";
import { SDKOptions, serverURLFromOptions } from "../lib/config.js";
import { encodeJSON as encodeJSON$, encodeSimple as encodeSimple$ } from "../lib/encodings.js";
import { HTTPClient } from "../lib/http.js";
import * as schemas$ from "../lib/schemas.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import * as z from "zod";

export class Webhooks extends ClientSDK {
    private readonly options$: SDKOptions & { hooks?: SDKHooks };

    constructor(options: SDKOptions = {}) {
        const opt = options as unknown;
        let hooks: SDKHooks;
        if (
            typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof SDKHooks
        ) {
            hooks = opt.hooks;
        } else {
            hooks = new SDKHooks();
        }

        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
            hooks,
        });

        this.options$ = { ...options, hooks };
        void this.options$;
    }

    /**
     * Create a new webhook
     *
     * @remarks
     * Creates a new webhook to send notifications to a URL when a specific event occurs.
     */
    async createWebhook(
        request: components.WebhookUpdateRequest,
        options?: RequestOptions
    ): Promise<components.Webhook> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => components.WebhookUpdateRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = encodeJSON$("body", payload$, { explode: true });

        const path$ = this.templateURLComponent("/webhooks")();

        const query$ = "";

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.apiKeyHeader === "function") {
            security$ = { apiKeyHeader: await this.options$.apiKeyHeader() };
        } else if (this.options$.apiKeyHeader) {
            security$ = { apiKeyHeader: this.options$.apiKeyHeader };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "createWebhook",
            oAuth2Scopes: [],
            securitySource: this.options$.apiKeyHeader,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, { context, errorCodes: ["4XX", "5XX"] });

        const [result$] = await this.matcher<components.Webhook>()
            .json(201, components.Webhook$)
            .fail(["4XX", "5XX"])
            .match(response);

        return result$;
    }

    /**
     * List all webhooks
     *
     * @remarks
     * Returns a list of all webhooks you have created.
     */
    async listWebhooks(options?: RequestOptions): Promise<components.WebhookPaginatedList> {
        const path$ = this.templateURLComponent("/webhooks")();

        const query$ = "";

        const headers$ = new Headers({
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.apiKeyHeader === "function") {
            security$ = { apiKeyHeader: await this.options$.apiKeyHeader() };
        } else if (this.options$.apiKeyHeader) {
            security$ = { apiKeyHeader: this.options$.apiKeyHeader };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "listWebhooks",
            oAuth2Scopes: [],
            securitySource: this.options$.apiKeyHeader,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
            },
            options
        );

        const response = await this.do$(request$, { context, errorCodes: ["4XX", "5XX"] });

        const [result$] = await this.matcher<components.WebhookPaginatedList>()
            .json(200, components.WebhookPaginatedList$)
            .fail(["4XX", "5XX"])
            .match(response);

        return result$;
    }

    /**
     * Retrieve a specific webhook
     *
     * @remarks
     * Returns the details of a specific webhook using the webhook object ID.
     */
    async getWebhook(webhookId: string, options?: RequestOptions): Promise<components.Webhook> {
        const input$: operations.GetWebhookRequest = {
            webhookId: webhookId,
        };

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.GetWebhookRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            webhookId: encodeSimple$("webhookId", payload$.webhookId, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/webhooks/{webhookId}")(pathParams$);

        const query$ = "";

        const headers$ = new Headers({
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.apiKeyHeader === "function") {
            security$ = { apiKeyHeader: await this.options$.apiKeyHeader() };
        } else if (this.options$.apiKeyHeader) {
            security$ = { apiKeyHeader: this.options$.apiKeyHeader };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "getWebhook",
            oAuth2Scopes: [],
            securitySource: this.options$.apiKeyHeader,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, { context, errorCodes: ["4XX", "5XX"] });

        const [result$] = await this.matcher<components.Webhook>()
            .json(200, components.Webhook$)
            .fail(["4XX", "5XX"])
            .match(response);

        return result$;
    }

    /**
     * Update an existing webhook
     *
     * @remarks
     * Updates an existing webhook using the webhook object ID.
     */
    async updateWebhook(
        webhookId: string,
        webhookUpdateRequest: components.WebhookUpdateRequest,
        options?: RequestOptions
    ): Promise<components.Webhook> {
        const input$: operations.UpdateWebhookRequest = {
            webhookId: webhookId,
            webhookUpdateRequest: webhookUpdateRequest,
        };

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.UpdateWebhookRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = encodeJSON$("body", payload$.WebhookUpdateRequest, { explode: true });

        const pathParams$ = {
            webhookId: encodeSimple$("webhookId", payload$.webhookId, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/webhooks/{webhookId}")(pathParams$);

        const query$ = "";

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.apiKeyHeader === "function") {
            security$ = { apiKeyHeader: await this.options$.apiKeyHeader() };
        } else if (this.options$.apiKeyHeader) {
            security$ = { apiKeyHeader: this.options$.apiKeyHeader };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "updateWebhook",
            oAuth2Scopes: [],
            securitySource: this.options$.apiKeyHeader,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "PUT",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, { context, errorCodes: ["4XX", "5XX"] });

        const [result$] = await this.matcher<components.Webhook>()
            .json(200, components.Webhook$)
            .fail(["4XX", "5XX"])
            .match(response);

        return result$;
    }

    /**
     * Delete a specific webhook
     *
     * @remarks
     * Deletes a specific webhook using the webhook object ID.
     */
    async deleteWebhook(webhookId: string, options?: RequestOptions): Promise<void> {
        const input$: operations.DeleteWebhookRequest = {
            webhookId: webhookId,
        };

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.DeleteWebhookRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            webhookId: encodeSimple$("webhookId", payload$.webhookId, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/webhooks/{webhookId}")(pathParams$);

        const query$ = "";

        const headers$ = new Headers({
            Accept: "*/*",
        });

        let security$;
        if (typeof this.options$.apiKeyHeader === "function") {
            security$ = { apiKeyHeader: await this.options$.apiKeyHeader() };
        } else if (this.options$.apiKeyHeader) {
            security$ = { apiKeyHeader: this.options$.apiKeyHeader };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "deleteWebhook",
            oAuth2Scopes: [],
            securitySource: this.options$.apiKeyHeader,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "DELETE",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, { context, errorCodes: ["4XX", "5XX"] });

        const [result$] = await this.matcher<void>()
            .void(204, z.void())
            .fail(["4XX", "5XX"])
            .match(response);

        return result$;
    }
}
