/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { ratesGet } from "../funcs/ratesGet.js";
import { ratesListShipmentRates } from "../funcs/ratesListShipmentRates.js";
import { ratesListShipmentRatesByCurrencyCode } from "../funcs/ratesListShipmentRatesByCurrencyCode.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Rates extends ClientSDK {
  /**
   * Retrieve a rate
   *
   * @remarks
   * Returns an existing rate using a rate object ID.
   */
  async get(
    rateId: string,
    options?: RequestOptions,
  ): Promise<components.Rate> {
    return unwrapAsync(ratesGet(
      this,
      rateId,
      options,
    ));
  }

  /**
   * Retrieve shipment rates
   *
   * @remarks
   * Returns a paginated list of rates associated with a shipment
   */
  async listShipmentRates(
    shipmentId: string,
    page?: number | undefined,
    results?: number | undefined,
    options?: RequestOptions,
  ): Promise<components.RatePaginatedList> {
    return unwrapAsync(ratesListShipmentRates(
      this,
      shipmentId,
      page,
      results,
      options,
    ));
  }

  /**
   * Retrieve shipment rates in currency
   *
   * @remarks
   * Returns all available shipping rates for a shipment object.
   *
   * When you create a new valid shipment object, Shippo automatically calculates all available rates. Depending on your shipment data, there may be none, one or multiple rates.
   *
   * By default, the calculated rates will return the price in two currencies under the `amount` and `amount_local` keys, respectively. The `amount` key will contain the price of a rate expressed in the currency that is used in the country from where the parcel originates, and the `amount_local` key will contain the price expressed in the currency that is used in the country the parcel is shipped to. You can request rates with prices expressed in a different currency by adding the currency code to the end of the resource URL. The full list of supported currencies along with their codes can be viewed on <a href="http://openexchangerates.org/api/currencies.json">open exchange rates</a>.
   *
   * Note: re-requesting the rates with a different currency code will re-queue the shipment (i.e. set the Shipment's `status` to `QUEUED`) and the converted currency rates will only be available when the Shipment's `status` is set to `SUCCESS`.
   */
  async listShipmentRatesByCurrencyCode(
    request: operations.ListShipmentRatesByCurrencyCodeRequest,
    options?: RequestOptions,
  ): Promise<components.RatePaginatedList> {
    return unwrapAsync(ratesListShipmentRatesByCurrencyCode(
      this,
      request,
      options,
    ));
  }
}
