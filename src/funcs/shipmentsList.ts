/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { ShippoCore } from "../core.js";
import { encodeFormQuery, encodeSimple } from "../lib/encodings.js";
import * as M from "../lib/matchers.js";
import { safeParse } from "../lib/schemas.js";
import { RequestOptions } from "../lib/sdks.js";
import { extractSecurity, resolveGlobalSecurity } from "../lib/security.js";
import { pathToFunc } from "../lib/url.js";
import * as components from "../models/components/index.js";
import {
  ConnectionError,
  InvalidRequestError,
  RequestAbortedError,
  RequestTimeoutError,
  UnexpectedClientError,
} from "../models/errors/httpclienterrors.js";
import { SDKError } from "../models/errors/sdkerror.js";
import { SDKValidationError } from "../models/errors/sdkvalidationerror.js";
import * as operations from "../models/operations/index.js";
import { Result } from "../types/fp.js";

/**
 * List all shipments
 *
 * @remarks
 * Returns a list of all shipment objects.<br><br>
 * In order to filter results, you must use the below path parameters.
 * A maximum date range of 90 days is permitted.
 * Provided dates should be ISO 8601 UTC dates (timezone offsets are currently not supported).<br><br>
 *
 * Optional path parameters:<br>
 *   `object_created_gt`- object(s) created greater than a provided date time<br>
 *   `object_created_gte` - object(s) created greater than or equal to a provided date time<br>
 *   `object_created_lt` - object(s) created less than a provided date time<br>
 *   `object_created_lte` - object(s) created less than or equal to a provided date time<br>
 *
 *   Date format examples:<br>
 *     `2017-01-01`<br>
 *     `2017-01-01T03:30:30` or `2017-01-01T03:30:30.5`<br>
 *     `2017-01-01T03:30:30Z`<br><br>
 *
 *   Example URL:<br>
 *     `https://api.goshippo.com/shipments/?object_created_gte=2017-01-01T00:00:30&object_created_lt=2017-04-01T00:00:30`
 */
export async function shipmentsList(
  client: ShippoCore,
  request: operations.ListShipmentsRequest,
  options?: RequestOptions,
): Promise<
  Result<
    components.ShipmentPaginatedList,
    | SDKError
    | SDKValidationError
    | UnexpectedClientError
    | InvalidRequestError
    | RequestAbortedError
    | RequestTimeoutError
    | ConnectionError
  >
> {
  const input = request;

  const parsed = safeParse(
    input,
    (value) => operations.ListShipmentsRequest$outboundSchema.parse(value),
    "Input validation failed",
  );
  if (!parsed.ok) {
    return parsed;
  }
  const payload = parsed.value;
  const body = null;

  const path = pathToFunc("/shipments")();

  const query = encodeFormQuery({
    "object_created_gt": payload.object_created_gt,
    "object_created_gte": payload.object_created_gte,
    "object_created_lt": payload.object_created_lt,
    "object_created_lte": payload.object_created_lte,
    "page": payload.page,
    "results": payload.results,
  });

  const headers = new Headers({
    Accept: "application/json",
    "SHIPPO-API-VERSION": encodeSimple(
      "SHIPPO-API-VERSION",
      client._options.shippoApiVersion,
      { explode: false, charEncoding: "none" },
    ),
  });

  const secConfig = await extractSecurity(client._options.apiKeyHeader);
  const securityInput = secConfig == null ? {} : { apiKeyHeader: secConfig };
  const context = {
    operationID: "ListShipments",
    oAuth2Scopes: [],
    securitySource: client._options.apiKeyHeader,
  };
  const requestSecurity = resolveGlobalSecurity(securityInput);

  const requestRes = client._createRequest(context, {
    security: requestSecurity,
    method: "GET",
    path: path,
    headers: headers,
    query: query,
    body: body,
    timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1,
  }, options);
  if (!requestRes.ok) {
    return requestRes;
  }
  const req = requestRes.value;

  const doResult = await client._do(req, {
    context,
    errorCodes: ["400", "4XX", "5XX"],
    retryConfig: options?.retries
      || client._options.retryConfig,
    retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
  });
  if (!doResult.ok) {
    return doResult;
  }
  const response = doResult.value;

  const [result] = await M.match<
    components.ShipmentPaginatedList,
    | SDKError
    | SDKValidationError
    | UnexpectedClientError
    | InvalidRequestError
    | RequestAbortedError
    | RequestTimeoutError
    | ConnectionError
  >(
    M.json(200, components.ShipmentPaginatedList$inboundSchema),
    M.fail([400, "4XX", "5XX"]),
  )(response);
  if (!result.ok) {
    return result;
  }

  return result;
}
